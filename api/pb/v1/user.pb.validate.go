// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user.proto

package api_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserSearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSearchRequestMultiError, or nil if none found.
func (m *UserSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return UserSearchRequestMultiError(errors)
	}

	return nil
}

// UserSearchRequestMultiError is an error wrapping multiple validation errors
// returned by UserSearchRequest.ValidateAll() if the designated constraints
// aren't met.
type UserSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSearchRequestMultiError) AllErrors() []error { return m }

// UserSearchRequestValidationError is the validation error returned by
// UserSearchRequest.Validate if the designated constraints aren't met.
type UserSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSearchRequestValidationError) ErrorName() string {
	return "UserSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSearchRequestValidationError{}

// Validate checks the field values on UserSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSearchResponseMultiError, or nil if none found.
func (m *UserSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserSearchResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserSearchResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserSearchResponseMultiError(errors)
	}

	return nil
}

// UserSearchResponseMultiError is an error wrapping multiple validation errors
// returned by UserSearchResponse.ValidateAll() if the designated constraints
// aren't met.
type UserSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSearchResponseMultiError) AllErrors() []error { return m }

// UserSearchResponseValidationError is the validation error returned by
// UserSearchResponse.Validate if the designated constraints aren't met.
type UserSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSearchResponseValidationError) ErrorName() string {
	return "UserSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSearchResponseValidationError{}

// Validate checks the field values on UserSearchResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserSearchResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSearchResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSearchResponse_ItemMultiError, or nil if none found.
func (m *UserSearchResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSearchResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Surname

	if len(errors) > 0 {
		return UserSearchResponse_ItemMultiError(errors)
	}

	return nil
}

// UserSearchResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by UserSearchResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type UserSearchResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSearchResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSearchResponse_ItemMultiError) AllErrors() []error { return m }

// UserSearchResponse_ItemValidationError is the validation error returned by
// UserSearchResponse_Item.Validate if the designated constraints aren't met.
type UserSearchResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSearchResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSearchResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSearchResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSearchResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSearchResponse_ItemValidationError) ErrorName() string {
	return "UserSearchResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e UserSearchResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSearchResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSearchResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSearchResponse_ItemValidationError{}
