// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/contact.proto

package api_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContactListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactListRequestMultiError, or nil if none found.
func (m *ContactListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactListRequestMultiError(errors)
	}

	return nil
}

// ContactListRequestMultiError is an error wrapping multiple validation errors
// returned by ContactListRequest.ValidateAll() if the designated constraints
// aren't met.
type ContactListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactListRequestMultiError) AllErrors() []error { return m }

// ContactListRequestValidationError is the validation error returned by
// ContactListRequest.Validate if the designated constraints aren't met.
type ContactListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactListRequestValidationError) ErrorName() string {
	return "ContactListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactListRequestValidationError{}

// Validate checks the field values on ContactListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactListResponseMultiError, or nil if none found.
func (m *ContactListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContactListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContactListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContactListResponseMultiError(errors)
	}

	return nil
}

// ContactListResponseMultiError is an error wrapping multiple validation
// errors returned by ContactListResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactListResponseMultiError) AllErrors() []error { return m }

// ContactListResponseValidationError is the validation error returned by
// ContactListResponse.Validate if the designated constraints aren't met.
type ContactListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactListResponseValidationError) ErrorName() string {
	return "ContactListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactListResponseValidationError{}

// Validate checks the field values on ContactDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactDeleteRequestMultiError, or nil if none found.
func (m *ContactDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FriendId

	if len(errors) > 0 {
		return ContactDeleteRequestMultiError(errors)
	}

	return nil
}

// ContactDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ContactDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactDeleteRequestMultiError) AllErrors() []error { return m }

// ContactDeleteRequestValidationError is the validation error returned by
// ContactDeleteRequest.Validate if the designated constraints aren't met.
type ContactDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactDeleteRequestValidationError) ErrorName() string {
	return "ContactDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactDeleteRequestValidationError{}

// Validate checks the field values on ContactDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactDeleteResponseMultiError, or nil if none found.
func (m *ContactDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactDeleteResponseMultiError(errors)
	}

	return nil
}

// ContactDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ContactDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactDeleteResponseMultiError) AllErrors() []error { return m }

// ContactDeleteResponseValidationError is the validation error returned by
// ContactDeleteResponse.Validate if the designated constraints aren't met.
type ContactDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactDeleteResponseValidationError) ErrorName() string {
	return "ContactDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactDeleteResponseValidationError{}

// Validate checks the field values on ContactDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactDetailRequestMultiError, or nil if none found.
func (m *ContactDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ContactDetailRequestMultiError(errors)
	}

	return nil
}

// ContactDetailRequestMultiError is an error wrapping multiple validation
// errors returned by ContactDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactDetailRequestMultiError) AllErrors() []error { return m }

// ContactDetailRequestValidationError is the validation error returned by
// ContactDetailRequest.Validate if the designated constraints aren't met.
type ContactDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactDetailRequestValidationError) ErrorName() string {
	return "ContactDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactDetailRequestValidationError{}

// Validate checks the field values on ContactDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactDetailResponseMultiError, or nil if none found.
func (m *ContactDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Gender

	// no validation rules for About

	// no validation rules for FriendStatus

	// no validation rules for GroupId

	// no validation rules for IsBot

	if len(errors) > 0 {
		return ContactDetailResponseMultiError(errors)
	}

	return nil
}

// ContactDetailResponseMultiError is an error wrapping multiple validation
// errors returned by ContactDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactDetailResponseMultiError) AllErrors() []error { return m }

// ContactDetailResponseValidationError is the validation error returned by
// ContactDetailResponse.Validate if the designated constraints aren't met.
type ContactDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactDetailResponseValidationError) ErrorName() string {
	return "ContactDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactDetailResponseValidationError{}

// Validate checks the field values on ContactChangeGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactChangeGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactChangeGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactChangeGroupRequestMultiError, or nil if none found.
func (m *ContactChangeGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactChangeGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for GroupId

	if len(errors) > 0 {
		return ContactChangeGroupRequestMultiError(errors)
	}

	return nil
}

// ContactChangeGroupRequestMultiError is an error wrapping multiple validation
// errors returned by ContactChangeGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type ContactChangeGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactChangeGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactChangeGroupRequestMultiError) AllErrors() []error { return m }

// ContactChangeGroupRequestValidationError is the validation error returned by
// ContactChangeGroupRequest.Validate if the designated constraints aren't met.
type ContactChangeGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactChangeGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactChangeGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactChangeGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactChangeGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactChangeGroupRequestValidationError) ErrorName() string {
	return "ContactChangeGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactChangeGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactChangeGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactChangeGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactChangeGroupRequestValidationError{}

// Validate checks the field values on ContactChangeGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactChangeGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactChangeGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactChangeGroupResponseMultiError, or nil if none found.
func (m *ContactChangeGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactChangeGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactChangeGroupResponseMultiError(errors)
	}

	return nil
}

// ContactChangeGroupResponseMultiError is an error wrapping multiple
// validation errors returned by ContactChangeGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactChangeGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactChangeGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactChangeGroupResponseMultiError) AllErrors() []error { return m }

// ContactChangeGroupResponseValidationError is the validation error returned
// by ContactChangeGroupResponse.Validate if the designated constraints aren't met.
type ContactChangeGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactChangeGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactChangeGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactChangeGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactChangeGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactChangeGroupResponseValidationError) ErrorName() string {
	return "ContactChangeGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactChangeGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactChangeGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactChangeGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactChangeGroupResponseValidationError{}

// Validate checks the field values on ContactRequestCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactRequestCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactRequestCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactRequestCreateRequestMultiError, or nil if none found.
func (m *ContactRequestCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactRequestCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FriendId

	if len(errors) > 0 {
		return ContactRequestCreateRequestMultiError(errors)
	}

	return nil
}

// ContactRequestCreateRequestMultiError is an error wrapping multiple
// validation errors returned by ContactRequestCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type ContactRequestCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactRequestCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactRequestCreateRequestMultiError) AllErrors() []error { return m }

// ContactRequestCreateRequestValidationError is the validation error returned
// by ContactRequestCreateRequest.Validate if the designated constraints
// aren't met.
type ContactRequestCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestCreateRequestValidationError) ErrorName() string {
	return "ContactRequestCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactRequestCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequestCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestCreateRequestValidationError{}

// Validate checks the field values on ContactRequestCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactRequestCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactRequestCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactRequestCreateResponseMultiError, or nil if none found.
func (m *ContactRequestCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactRequestCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactRequestCreateResponseMultiError(errors)
	}

	return nil
}

// ContactRequestCreateResponseMultiError is an error wrapping multiple
// validation errors returned by ContactRequestCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactRequestCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactRequestCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactRequestCreateResponseMultiError) AllErrors() []error { return m }

// ContactRequestCreateResponseValidationError is the validation error returned
// by ContactRequestCreateResponse.Validate if the designated constraints
// aren't met.
type ContactRequestCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestCreateResponseValidationError) ErrorName() string {
	return "ContactRequestCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactRequestCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequestCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestCreateResponseValidationError{}

// Validate checks the field values on ContactRequestAcceptRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactRequestAcceptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactRequestAcceptRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactRequestAcceptRequestMultiError, or nil if none found.
func (m *ContactRequestAcceptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactRequestAcceptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplyId

	if len(errors) > 0 {
		return ContactRequestAcceptRequestMultiError(errors)
	}

	return nil
}

// ContactRequestAcceptRequestMultiError is an error wrapping multiple
// validation errors returned by ContactRequestAcceptRequest.ValidateAll() if
// the designated constraints aren't met.
type ContactRequestAcceptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactRequestAcceptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactRequestAcceptRequestMultiError) AllErrors() []error { return m }

// ContactRequestAcceptRequestValidationError is the validation error returned
// by ContactRequestAcceptRequest.Validate if the designated constraints
// aren't met.
type ContactRequestAcceptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestAcceptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestAcceptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestAcceptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestAcceptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestAcceptRequestValidationError) ErrorName() string {
	return "ContactRequestAcceptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactRequestAcceptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequestAcceptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestAcceptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestAcceptRequestValidationError{}

// Validate checks the field values on ContactRequestAcceptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactRequestAcceptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactRequestAcceptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactRequestAcceptResponseMultiError, or nil if none found.
func (m *ContactRequestAcceptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactRequestAcceptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactRequestAcceptResponseMultiError(errors)
	}

	return nil
}

// ContactRequestAcceptResponseMultiError is an error wrapping multiple
// validation errors returned by ContactRequestAcceptResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactRequestAcceptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactRequestAcceptResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactRequestAcceptResponseMultiError) AllErrors() []error { return m }

// ContactRequestAcceptResponseValidationError is the validation error returned
// by ContactRequestAcceptResponse.Validate if the designated constraints
// aren't met.
type ContactRequestAcceptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestAcceptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestAcceptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestAcceptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestAcceptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestAcceptResponseValidationError) ErrorName() string {
	return "ContactRequestAcceptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactRequestAcceptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequestAcceptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestAcceptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestAcceptResponseValidationError{}

// Validate checks the field values on ContactRequestDeclineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactRequestDeclineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactRequestDeclineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactRequestDeclineRequestMultiError, or nil if none found.
func (m *ContactRequestDeclineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactRequestDeclineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplyId

	if len(errors) > 0 {
		return ContactRequestDeclineRequestMultiError(errors)
	}

	return nil
}

// ContactRequestDeclineRequestMultiError is an error wrapping multiple
// validation errors returned by ContactRequestDeclineRequest.ValidateAll() if
// the designated constraints aren't met.
type ContactRequestDeclineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactRequestDeclineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactRequestDeclineRequestMultiError) AllErrors() []error { return m }

// ContactRequestDeclineRequestValidationError is the validation error returned
// by ContactRequestDeclineRequest.Validate if the designated constraints
// aren't met.
type ContactRequestDeclineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestDeclineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestDeclineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestDeclineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestDeclineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestDeclineRequestValidationError) ErrorName() string {
	return "ContactRequestDeclineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactRequestDeclineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequestDeclineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestDeclineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestDeclineRequestValidationError{}

// Validate checks the field values on ContactRequestDeclineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactRequestDeclineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactRequestDeclineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContactRequestDeclineResponseMultiError, or nil if none found.
func (m *ContactRequestDeclineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactRequestDeclineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactRequestDeclineResponseMultiError(errors)
	}

	return nil
}

// ContactRequestDeclineResponseMultiError is an error wrapping multiple
// validation errors returned by ContactRequestDeclineResponse.ValidateAll()
// if the designated constraints aren't met.
type ContactRequestDeclineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactRequestDeclineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactRequestDeclineResponseMultiError) AllErrors() []error { return m }

// ContactRequestDeclineResponseValidationError is the validation error
// returned by ContactRequestDeclineResponse.Validate if the designated
// constraints aren't met.
type ContactRequestDeclineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestDeclineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestDeclineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestDeclineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestDeclineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestDeclineResponseValidationError) ErrorName() string {
	return "ContactRequestDeclineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactRequestDeclineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequestDeclineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestDeclineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestDeclineResponseValidationError{}

// Validate checks the field values on ContactRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactRequestListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactRequestListResponseMultiError, or nil if none found.
func (m *ContactRequestListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactRequestListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContactRequestListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContactRequestListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactRequestListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContactRequestListResponseMultiError(errors)
	}

	return nil
}

// ContactRequestListResponseMultiError is an error wrapping multiple
// validation errors returned by ContactRequestListResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactRequestListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactRequestListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactRequestListResponseMultiError) AllErrors() []error { return m }

// ContactRequestListResponseValidationError is the validation error returned
// by ContactRequestListResponse.Validate if the designated constraints aren't met.
type ContactRequestListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestListResponseValidationError) ErrorName() string {
	return "ContactRequestListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactRequestListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequestListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestListResponseValidationError{}

// Validate checks the field values on ContactListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactListResponse_ItemMultiError, or nil if none found.
func (m *ContactListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Gender

	// no validation rules for About

	// no validation rules for IsOnline

	// no validation rules for GroupId

	if len(errors) > 0 {
		return ContactListResponse_ItemMultiError(errors)
	}

	return nil
}

// ContactListResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by ContactListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type ContactListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactListResponse_ItemMultiError) AllErrors() []error { return m }

// ContactListResponse_ItemValidationError is the validation error returned by
// ContactListResponse_Item.Validate if the designated constraints aren't met.
type ContactListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactListResponse_ItemValidationError) ErrorName() string {
	return "ContactListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ContactListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactListResponse_ItemValidationError{}

// Validate checks the field values on ContactRequestListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactRequestListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactRequestListResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContactRequestListResponse_ItemMultiError, or nil if none found.
func (m *ContactRequestListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactRequestListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for FriendId

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Surname

	if len(errors) > 0 {
		return ContactRequestListResponse_ItemMultiError(errors)
	}

	return nil
}

// ContactRequestListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by ContactRequestListResponse_Item.ValidateAll()
// if the designated constraints aren't met.
type ContactRequestListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactRequestListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactRequestListResponse_ItemMultiError) AllErrors() []error { return m }

// ContactRequestListResponse_ItemValidationError is the validation error
// returned by ContactRequestListResponse_Item.Validate if the designated
// constraints aren't met.
type ContactRequestListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestListResponse_ItemValidationError) ErrorName() string {
	return "ContactRequestListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ContactRequestListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequestListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestListResponse_ItemValidationError{}
