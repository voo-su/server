// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/dialog.proto

package api_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DialogSessionItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionItemMultiError, or nil if none found.
func (m *DialogSessionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DialogType

	// no validation rules for ReceiverId

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for UnreadNum

	// no validation rules for MsgText

	// no validation rules for UpdatedAt

	// no validation rules for IsTop

	// no validation rules for IsDisturb

	// no validation rules for IsOnline

	// no validation rules for IsBot

	if len(errors) > 0 {
		return DialogSessionItemMultiError(errors)
	}

	return nil
}

// DialogSessionItemMultiError is an error wrapping multiple validation errors
// returned by DialogSessionItem.ValidateAll() if the designated constraints
// aren't met.
type DialogSessionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionItemMultiError) AllErrors() []error { return m }

// DialogSessionItemValidationError is the validation error returned by
// DialogSessionItem.Validate if the designated constraints aren't met.
type DialogSessionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionItemValidationError) ErrorName() string {
	return "DialogSessionItemValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionItemValidationError{}

// Validate checks the field values on DialogSessionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionCreateRequestMultiError, or nil if none found.
func (m *DialogSessionCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DialogType

	// no validation rules for ReceiverId

	if len(errors) > 0 {
		return DialogSessionCreateRequestMultiError(errors)
	}

	return nil
}

// DialogSessionCreateRequestMultiError is an error wrapping multiple
// validation errors returned by DialogSessionCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type DialogSessionCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionCreateRequestMultiError) AllErrors() []error { return m }

// DialogSessionCreateRequestValidationError is the validation error returned
// by DialogSessionCreateRequest.Validate if the designated constraints aren't met.
type DialogSessionCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionCreateRequestValidationError) ErrorName() string {
	return "DialogSessionCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionCreateRequestValidationError{}

// Validate checks the field values on DialogSessionCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionCreateResponseMultiError, or nil if none found.
func (m *DialogSessionCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DialogType

	// no validation rules for ReceiverId

	// no validation rules for IsTop

	// no validation rules for IsDisturb

	// no validation rules for IsOnline

	// no validation rules for IsBot

	// no validation rules for Username

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Avatar

	// no validation rules for UnreadNum

	// no validation rules for MsgText

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return DialogSessionCreateResponseMultiError(errors)
	}

	return nil
}

// DialogSessionCreateResponseMultiError is an error wrapping multiple
// validation errors returned by DialogSessionCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type DialogSessionCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionCreateResponseMultiError) AllErrors() []error { return m }

// DialogSessionCreateResponseValidationError is the validation error returned
// by DialogSessionCreateResponse.Validate if the designated constraints
// aren't met.
type DialogSessionCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionCreateResponseValidationError) ErrorName() string {
	return "DialogSessionCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionCreateResponseValidationError{}

// Validate checks the field values on DialogSessionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionDeleteRequestMultiError, or nil if none found.
func (m *DialogSessionDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ListId

	if len(errors) > 0 {
		return DialogSessionDeleteRequestMultiError(errors)
	}

	return nil
}

// DialogSessionDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by DialogSessionDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type DialogSessionDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionDeleteRequestMultiError) AllErrors() []error { return m }

// DialogSessionDeleteRequestValidationError is the validation error returned
// by DialogSessionDeleteRequest.Validate if the designated constraints aren't met.
type DialogSessionDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionDeleteRequestValidationError) ErrorName() string {
	return "DialogSessionDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionDeleteRequestValidationError{}

// Validate checks the field values on DialogSessionDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionDeleteResponseMultiError, or nil if none found.
func (m *DialogSessionDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DialogSessionDeleteResponseMultiError(errors)
	}

	return nil
}

// DialogSessionDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by DialogSessionDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type DialogSessionDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionDeleteResponseMultiError) AllErrors() []error { return m }

// DialogSessionDeleteResponseValidationError is the validation error returned
// by DialogSessionDeleteResponse.Validate if the designated constraints
// aren't met.
type DialogSessionDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionDeleteResponseValidationError) ErrorName() string {
	return "DialogSessionDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionDeleteResponseValidationError{}

// Validate checks the field values on DialogSessionTopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionTopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionTopRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionTopRequestMultiError, or nil if none found.
func (m *DialogSessionTopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionTopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ListId

	// no validation rules for Type

	if len(errors) > 0 {
		return DialogSessionTopRequestMultiError(errors)
	}

	return nil
}

// DialogSessionTopRequestMultiError is an error wrapping multiple validation
// errors returned by DialogSessionTopRequest.ValidateAll() if the designated
// constraints aren't met.
type DialogSessionTopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionTopRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionTopRequestMultiError) AllErrors() []error { return m }

// DialogSessionTopRequestValidationError is the validation error returned by
// DialogSessionTopRequest.Validate if the designated constraints aren't met.
type DialogSessionTopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionTopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionTopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionTopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionTopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionTopRequestValidationError) ErrorName() string {
	return "DialogSessionTopRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionTopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionTopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionTopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionTopRequestValidationError{}

// Validate checks the field values on DialogSessionTopResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionTopResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionTopResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionTopResponseMultiError, or nil if none found.
func (m *DialogSessionTopResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionTopResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DialogSessionTopResponseMultiError(errors)
	}

	return nil
}

// DialogSessionTopResponseMultiError is an error wrapping multiple validation
// errors returned by DialogSessionTopResponse.ValidateAll() if the designated
// constraints aren't met.
type DialogSessionTopResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionTopResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionTopResponseMultiError) AllErrors() []error { return m }

// DialogSessionTopResponseValidationError is the validation error returned by
// DialogSessionTopResponse.Validate if the designated constraints aren't met.
type DialogSessionTopResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionTopResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionTopResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionTopResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionTopResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionTopResponseValidationError) ErrorName() string {
	return "DialogSessionTopResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionTopResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionTopResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionTopResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionTopResponseValidationError{}

// Validate checks the field values on DialogSessionDisturbRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionDisturbRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionDisturbRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionDisturbRequestMultiError, or nil if none found.
func (m *DialogSessionDisturbRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionDisturbRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DialogType

	// no validation rules for ReceiverId

	// no validation rules for IsDisturb

	if len(errors) > 0 {
		return DialogSessionDisturbRequestMultiError(errors)
	}

	return nil
}

// DialogSessionDisturbRequestMultiError is an error wrapping multiple
// validation errors returned by DialogSessionDisturbRequest.ValidateAll() if
// the designated constraints aren't met.
type DialogSessionDisturbRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionDisturbRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionDisturbRequestMultiError) AllErrors() []error { return m }

// DialogSessionDisturbRequestValidationError is the validation error returned
// by DialogSessionDisturbRequest.Validate if the designated constraints
// aren't met.
type DialogSessionDisturbRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionDisturbRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionDisturbRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionDisturbRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionDisturbRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionDisturbRequestValidationError) ErrorName() string {
	return "DialogSessionDisturbRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionDisturbRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionDisturbRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionDisturbRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionDisturbRequestValidationError{}

// Validate checks the field values on DialogSessionDisturbResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionDisturbResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionDisturbResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionDisturbResponseMultiError, or nil if none found.
func (m *DialogSessionDisturbResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionDisturbResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DialogSessionDisturbResponseMultiError(errors)
	}

	return nil
}

// DialogSessionDisturbResponseMultiError is an error wrapping multiple
// validation errors returned by DialogSessionDisturbResponse.ValidateAll() if
// the designated constraints aren't met.
type DialogSessionDisturbResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionDisturbResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionDisturbResponseMultiError) AllErrors() []error { return m }

// DialogSessionDisturbResponseValidationError is the validation error returned
// by DialogSessionDisturbResponse.Validate if the designated constraints
// aren't met.
type DialogSessionDisturbResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionDisturbResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionDisturbResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionDisturbResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionDisturbResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionDisturbResponseValidationError) ErrorName() string {
	return "DialogSessionDisturbResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionDisturbResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionDisturbResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionDisturbResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionDisturbResponseValidationError{}

// Validate checks the field values on DialogSessionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionListRequestMultiError, or nil if none found.
func (m *DialogSessionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DialogSessionListRequestMultiError(errors)
	}

	return nil
}

// DialogSessionListRequestMultiError is an error wrapping multiple validation
// errors returned by DialogSessionListRequest.ValidateAll() if the designated
// constraints aren't met.
type DialogSessionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionListRequestMultiError) AllErrors() []error { return m }

// DialogSessionListRequestValidationError is the validation error returned by
// DialogSessionListRequest.Validate if the designated constraints aren't met.
type DialogSessionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionListRequestValidationError) ErrorName() string {
	return "DialogSessionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionListRequestValidationError{}

// Validate checks the field values on DialogSessionListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DialogSessionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DialogSessionListResponseMultiError, or nil if none found.
func (m *DialogSessionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DialogSessionListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DialogSessionListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DialogSessionListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DialogSessionListResponseMultiError(errors)
	}

	return nil
}

// DialogSessionListResponseMultiError is an error wrapping multiple validation
// errors returned by DialogSessionListResponse.ValidateAll() if the
// designated constraints aren't met.
type DialogSessionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionListResponseMultiError) AllErrors() []error { return m }

// DialogSessionListResponseValidationError is the validation error returned by
// DialogSessionListResponse.Validate if the designated constraints aren't met.
type DialogSessionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionListResponseValidationError) ErrorName() string {
	return "DialogSessionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionListResponseValidationError{}

// Validate checks the field values on DialogSessionClearUnreadNumRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DialogSessionClearUnreadNumRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionClearUnreadNumRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DialogSessionClearUnreadNumRequestMultiError, or nil if none found.
func (m *DialogSessionClearUnreadNumRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionClearUnreadNumRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DialogType

	// no validation rules for ReceiverId

	if len(errors) > 0 {
		return DialogSessionClearUnreadNumRequestMultiError(errors)
	}

	return nil
}

// DialogSessionClearUnreadNumRequestMultiError is an error wrapping multiple
// validation errors returned by
// DialogSessionClearUnreadNumRequest.ValidateAll() if the designated
// constraints aren't met.
type DialogSessionClearUnreadNumRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionClearUnreadNumRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionClearUnreadNumRequestMultiError) AllErrors() []error { return m }

// DialogSessionClearUnreadNumRequestValidationError is the validation error
// returned by DialogSessionClearUnreadNumRequest.Validate if the designated
// constraints aren't met.
type DialogSessionClearUnreadNumRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionClearUnreadNumRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionClearUnreadNumRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionClearUnreadNumRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionClearUnreadNumRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionClearUnreadNumRequestValidationError) ErrorName() string {
	return "DialogSessionClearUnreadNumRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionClearUnreadNumRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionClearUnreadNumRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionClearUnreadNumRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionClearUnreadNumRequestValidationError{}

// Validate checks the field values on DialogSessionClearUnreadNumResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DialogSessionClearUnreadNumResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DialogSessionClearUnreadNumResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DialogSessionClearUnreadNumResponseMultiError, or nil if none found.
func (m *DialogSessionClearUnreadNumResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DialogSessionClearUnreadNumResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DialogSessionClearUnreadNumResponseMultiError(errors)
	}

	return nil
}

// DialogSessionClearUnreadNumResponseMultiError is an error wrapping multiple
// validation errors returned by
// DialogSessionClearUnreadNumResponse.ValidateAll() if the designated
// constraints aren't met.
type DialogSessionClearUnreadNumResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DialogSessionClearUnreadNumResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DialogSessionClearUnreadNumResponseMultiError) AllErrors() []error { return m }

// DialogSessionClearUnreadNumResponseValidationError is the validation error
// returned by DialogSessionClearUnreadNumResponse.Validate if the designated
// constraints aren't met.
type DialogSessionClearUnreadNumResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DialogSessionClearUnreadNumResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DialogSessionClearUnreadNumResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DialogSessionClearUnreadNumResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DialogSessionClearUnreadNumResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DialogSessionClearUnreadNumResponseValidationError) ErrorName() string {
	return "DialogSessionClearUnreadNumResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DialogSessionClearUnreadNumResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDialogSessionClearUnreadNumResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DialogSessionClearUnreadNumResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DialogSessionClearUnreadNumResponseValidationError{}
