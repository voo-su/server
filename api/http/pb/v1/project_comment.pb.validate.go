// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/project_comment.proto

package v1_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProjectCommentCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCommentCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCommentCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCommentCreateRequestMultiError, or nil if none found.
func (m *ProjectCommentCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCommentCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for Comment

	if len(errors) > 0 {
		return ProjectCommentCreateRequestMultiError(errors)
	}

	return nil
}

// ProjectCommentCreateRequestMultiError is an error wrapping multiple
// validation errors returned by ProjectCommentCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type ProjectCommentCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCommentCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCommentCreateRequestMultiError) AllErrors() []error { return m }

// ProjectCommentCreateRequestValidationError is the validation error returned
// by ProjectCommentCreateRequest.Validate if the designated constraints
// aren't met.
type ProjectCommentCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCommentCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCommentCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCommentCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCommentCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCommentCreateRequestValidationError) ErrorName() string {
	return "ProjectCommentCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCommentCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCommentCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCommentCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCommentCreateRequestValidationError{}

// Validate checks the field values on ProjectCommentCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCommentCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCommentCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCommentCreateResponseMultiError, or nil if none found.
func (m *ProjectCommentCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCommentCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ProjectCommentCreateResponseMultiError(errors)
	}

	return nil
}

// ProjectCommentCreateResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectCommentCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type ProjectCommentCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCommentCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCommentCreateResponseMultiError) AllErrors() []error { return m }

// ProjectCommentCreateResponseValidationError is the validation error returned
// by ProjectCommentCreateResponse.Validate if the designated constraints
// aren't met.
type ProjectCommentCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCommentCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCommentCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCommentCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCommentCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCommentCreateResponseValidationError) ErrorName() string {
	return "ProjectCommentCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCommentCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCommentCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCommentCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCommentCreateResponseValidationError{}

// Validate checks the field values on ProjectCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCommentRequestMultiError, or nil if none found.
func (m *ProjectCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return ProjectCommentRequestMultiError(errors)
	}

	return nil
}

// ProjectCommentRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCommentRequestMultiError) AllErrors() []error { return m }

// ProjectCommentRequestValidationError is the validation error returned by
// ProjectCommentRequest.Validate if the designated constraints aren't met.
type ProjectCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCommentRequestValidationError) ErrorName() string {
	return "ProjectCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCommentRequestValidationError{}

// Validate checks the field values on ProjectCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCommentResponseMultiError, or nil if none found.
func (m *ProjectCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectCommentResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectCommentResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectCommentResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectCommentResponseMultiError(errors)
	}

	return nil
}

// ProjectCommentResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCommentResponseMultiError) AllErrors() []error { return m }

// ProjectCommentResponseValidationError is the validation error returned by
// ProjectCommentResponse.Validate if the designated constraints aren't met.
type ProjectCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCommentResponseValidationError) ErrorName() string {
	return "ProjectCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCommentResponseValidationError{}

// Validate checks the field values on ProjectCommentResponse_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCommentResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCommentResponse_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCommentResponse_UserMultiError, or nil if none found.
func (m *ProjectCommentResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCommentResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Avatar

	// no validation rules for Username

	// no validation rules for Name

	// no validation rules for Surname

	if len(errors) > 0 {
		return ProjectCommentResponse_UserMultiError(errors)
	}

	return nil
}

// ProjectCommentResponse_UserMultiError is an error wrapping multiple
// validation errors returned by ProjectCommentResponse_User.ValidateAll() if
// the designated constraints aren't met.
type ProjectCommentResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCommentResponse_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCommentResponse_UserMultiError) AllErrors() []error { return m }

// ProjectCommentResponse_UserValidationError is the validation error returned
// by ProjectCommentResponse_User.Validate if the designated constraints
// aren't met.
type ProjectCommentResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCommentResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCommentResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCommentResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCommentResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCommentResponse_UserValidationError) ErrorName() string {
	return "ProjectCommentResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCommentResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCommentResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCommentResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCommentResponse_UserValidationError{}

// Validate checks the field values on ProjectCommentResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCommentResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCommentResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCommentResponse_ItemMultiError, or nil if none found.
func (m *ProjectCommentResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCommentResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TaskId

	// no validation rules for Comment

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectCommentResponse_ItemValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectCommentResponse_ItemValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectCommentResponse_ItemValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ProjectCommentResponse_ItemMultiError(errors)
	}

	return nil
}

// ProjectCommentResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by ProjectCommentResponse_Item.ValidateAll() if
// the designated constraints aren't met.
type ProjectCommentResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCommentResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCommentResponse_ItemMultiError) AllErrors() []error { return m }

// ProjectCommentResponse_ItemValidationError is the validation error returned
// by ProjectCommentResponse_Item.Validate if the designated constraints
// aren't met.
type ProjectCommentResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCommentResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCommentResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCommentResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCommentResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCommentResponse_ItemValidationError) ErrorName() string {
	return "ProjectCommentResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCommentResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCommentResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCommentResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCommentResponse_ItemValidationError{}
