// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/group_chat.proto

package v1_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GroupChatCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatCreateRequestMultiError, or nil if none found.
func (m *GroupChatCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Ids

	// no validation rules for Avatar

	if len(errors) > 0 {
		return GroupChatCreateRequestMultiError(errors)
	}

	return nil
}

// GroupChatCreateRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatCreateRequestMultiError) AllErrors() []error { return m }

// GroupChatCreateRequestValidationError is the validation error returned by
// GroupChatCreateRequest.Validate if the designated constraints aren't met.
type GroupChatCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatCreateRequestValidationError) ErrorName() string {
	return "GroupChatCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatCreateRequestValidationError{}

// Validate checks the field values on GroupChatCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatCreateResponseMultiError, or nil if none found.
func (m *GroupChatCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupChatCreateResponseMultiError(errors)
	}

	return nil
}

// GroupChatCreateResponseMultiError is an error wrapping multiple validation
// errors returned by GroupChatCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupChatCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatCreateResponseMultiError) AllErrors() []error { return m }

// GroupChatCreateResponseValidationError is the validation error returned by
// GroupChatCreateResponse.Validate if the designated constraints aren't met.
type GroupChatCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatCreateResponseValidationError) ErrorName() string {
	return "GroupChatCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatCreateResponseValidationError{}

// Validate checks the field values on GroupChatListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatListResponseMultiError, or nil if none found.
func (m *GroupChatListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupChatListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupChatListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupChatListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupChatListResponseMultiError(errors)
	}

	return nil
}

// GroupChatListResponseMultiError is an error wrapping multiple validation
// errors returned by GroupChatListResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupChatListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatListResponseMultiError) AllErrors() []error { return m }

// GroupChatListResponseValidationError is the validation error returned by
// GroupChatListResponse.Validate if the designated constraints aren't met.
type GroupChatListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatListResponseValidationError) ErrorName() string {
	return "GroupChatListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatListResponseValidationError{}

// Validate checks the field values on GroupChatDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatDetailRequestMultiError, or nil if none found.
func (m *GroupChatDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupChatDetailRequestMultiError(errors)
	}

	return nil
}

// GroupChatDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatDetailRequestMultiError) AllErrors() []error { return m }

// GroupChatDetailRequestValidationError is the validation error returned by
// GroupChatDetailRequest.Validate if the designated constraints aren't met.
type GroupChatDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatDetailRequestValidationError) ErrorName() string {
	return "GroupChatDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatDetailRequestValidationError{}

// Validate checks the field values on GroupChatDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatDetailResponseMultiError, or nil if none found.
func (m *GroupChatDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupName

	// no validation rules for Description

	// no validation rules for Avatar

	// no validation rules for CreatedAt

	// no validation rules for IsManager

	// no validation rules for IsDisturb

	// no validation rules for IsMute

	// no validation rules for IsOvert

	if len(errors) > 0 {
		return GroupChatDetailResponseMultiError(errors)
	}

	return nil
}

// GroupChatDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GroupChatDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupChatDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatDetailResponseMultiError) AllErrors() []error { return m }

// GroupChatDetailResponseValidationError is the validation error returned by
// GroupChatDetailResponse.Validate if the designated constraints aren't met.
type GroupChatDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatDetailResponseValidationError) ErrorName() string {
	return "GroupChatDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatDetailResponseValidationError{}

// Validate checks the field values on GroupChatMemberListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatMemberListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatMemberListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatMemberListRequestMultiError, or nil if none found.
func (m *GroupChatMemberListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatMemberListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupChatMemberListRequestMultiError(errors)
	}

	return nil
}

// GroupChatMemberListRequestMultiError is an error wrapping multiple
// validation errors returned by GroupChatMemberListRequest.ValidateAll() if
// the designated constraints aren't met.
type GroupChatMemberListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatMemberListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatMemberListRequestMultiError) AllErrors() []error { return m }

// GroupChatMemberListRequestValidationError is the validation error returned
// by GroupChatMemberListRequest.Validate if the designated constraints aren't met.
type GroupChatMemberListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatMemberListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatMemberListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatMemberListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatMemberListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatMemberListRequestValidationError) ErrorName() string {
	return "GroupChatMemberListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatMemberListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatMemberListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatMemberListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatMemberListRequestValidationError{}

// Validate checks the field values on GroupChatMemberListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatMemberListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatMemberListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatMemberListResponseMultiError, or nil if none found.
func (m *GroupChatMemberListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatMemberListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupChatMemberListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupChatMemberListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupChatMemberListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupChatMemberListResponseMultiError(errors)
	}

	return nil
}

// GroupChatMemberListResponseMultiError is an error wrapping multiple
// validation errors returned by GroupChatMemberListResponse.ValidateAll() if
// the designated constraints aren't met.
type GroupChatMemberListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatMemberListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatMemberListResponseMultiError) AllErrors() []error { return m }

// GroupChatMemberListResponseValidationError is the validation error returned
// by GroupChatMemberListResponse.Validate if the designated constraints
// aren't met.
type GroupChatMemberListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatMemberListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatMemberListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatMemberListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatMemberListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatMemberListResponseValidationError) ErrorName() string {
	return "GroupChatMemberListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatMemberListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatMemberListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatMemberListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatMemberListResponseValidationError{}

// Validate checks the field values on GroupChatDismissRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatDismissRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatDismissRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatDismissRequestMultiError, or nil if none found.
func (m *GroupChatDismissRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatDismissRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupChatDismissRequestMultiError(errors)
	}

	return nil
}

// GroupChatDismissRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatDismissRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatDismissRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatDismissRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatDismissRequestMultiError) AllErrors() []error { return m }

// GroupChatDismissRequestValidationError is the validation error returned by
// GroupChatDismissRequest.Validate if the designated constraints aren't met.
type GroupChatDismissRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatDismissRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatDismissRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatDismissRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatDismissRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatDismissRequestValidationError) ErrorName() string {
	return "GroupChatDismissRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatDismissRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatDismissRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatDismissRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatDismissRequestValidationError{}

// Validate checks the field values on GroupDismissResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupDismissResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupDismissResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupDismissResponseMultiError, or nil if none found.
func (m *GroupDismissResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupDismissResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupDismissResponseMultiError(errors)
	}

	return nil
}

// GroupDismissResponseMultiError is an error wrapping multiple validation
// errors returned by GroupDismissResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupDismissResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupDismissResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupDismissResponseMultiError) AllErrors() []error { return m }

// GroupDismissResponseValidationError is the validation error returned by
// GroupDismissResponse.Validate if the designated constraints aren't met.
type GroupDismissResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupDismissResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupDismissResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupDismissResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupDismissResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupDismissResponseValidationError) ErrorName() string {
	return "GroupDismissResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupDismissResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupDismissResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupDismissResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupDismissResponseValidationError{}

// Validate checks the field values on GroupChatInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatInviteRequestMultiError, or nil if none found.
func (m *GroupChatInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Ids

	if len(errors) > 0 {
		return GroupChatInviteRequestMultiError(errors)
	}

	return nil
}

// GroupChatInviteRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatInviteRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatInviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatInviteRequestMultiError) AllErrors() []error { return m }

// GroupChatInviteRequestValidationError is the validation error returned by
// GroupChatInviteRequest.Validate if the designated constraints aren't met.
type GroupChatInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatInviteRequestValidationError) ErrorName() string {
	return "GroupChatInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatInviteRequestValidationError{}

// Validate checks the field values on GroupChatInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatInviteResponseMultiError, or nil if none found.
func (m *GroupChatInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupChatInviteResponseMultiError(errors)
	}

	return nil
}

// GroupChatInviteResponseMultiError is an error wrapping multiple validation
// errors returned by GroupChatInviteResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupChatInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatInviteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatInviteResponseMultiError) AllErrors() []error { return m }

// GroupChatInviteResponseValidationError is the validation error returned by
// GroupChatInviteResponse.Validate if the designated constraints aren't met.
type GroupChatInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatInviteResponseValidationError) ErrorName() string {
	return "GroupChatInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatInviteResponseValidationError{}

// Validate checks the field values on GroupChatGetInviteFriendsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GroupChatGetInviteFriendsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatGetInviteFriendsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GroupChatGetInviteFriendsRequestMultiError, or nil if none found.
func (m *GroupChatGetInviteFriendsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatGetInviteFriendsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupChatGetInviteFriendsRequestMultiError(errors)
	}

	return nil
}

// GroupChatGetInviteFriendsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GroupChatGetInviteFriendsRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatGetInviteFriendsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatGetInviteFriendsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatGetInviteFriendsRequestMultiError) AllErrors() []error { return m }

// GroupChatGetInviteFriendsRequestValidationError is the validation error
// returned by GroupChatGetInviteFriendsRequest.Validate if the designated
// constraints aren't met.
type GroupChatGetInviteFriendsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatGetInviteFriendsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatGetInviteFriendsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatGetInviteFriendsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatGetInviteFriendsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatGetInviteFriendsRequestValidationError) ErrorName() string {
	return "GroupChatGetInviteFriendsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatGetInviteFriendsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatGetInviteFriendsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatGetInviteFriendsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatGetInviteFriendsRequestValidationError{}

// Validate checks the field values on GroupChatSecedeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatSecedeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatSecedeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatSecedeRequestMultiError, or nil if none found.
func (m *GroupChatSecedeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatSecedeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupChatSecedeRequestMultiError(errors)
	}

	return nil
}

// GroupChatSecedeRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatSecedeRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatSecedeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatSecedeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatSecedeRequestMultiError) AllErrors() []error { return m }

// GroupChatSecedeRequestValidationError is the validation error returned by
// GroupChatSecedeRequest.Validate if the designated constraints aren't met.
type GroupChatSecedeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatSecedeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatSecedeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatSecedeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatSecedeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatSecedeRequestValidationError) ErrorName() string {
	return "GroupChatSecedeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatSecedeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatSecedeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatSecedeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatSecedeRequestValidationError{}

// Validate checks the field values on GroupSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupSettingRequestMultiError, or nil if none found.
func (m *GroupSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupName

	// no validation rules for Avatar

	// no validation rules for Description

	if len(errors) > 0 {
		return GroupSettingRequestMultiError(errors)
	}

	return nil
}

// GroupSettingRequestMultiError is an error wrapping multiple validation
// errors returned by GroupSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSettingRequestMultiError) AllErrors() []error { return m }

// GroupSettingRequestValidationError is the validation error returned by
// GroupSettingRequest.Validate if the designated constraints aren't met.
type GroupSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSettingRequestValidationError) ErrorName() string {
	return "GroupSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSettingRequestValidationError{}

// Validate checks the field values on GroupChatSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatSettingResponseMultiError, or nil if none found.
func (m *GroupChatSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupChatSettingResponseMultiError(errors)
	}

	return nil
}

// GroupChatSettingResponseMultiError is an error wrapping multiple validation
// errors returned by GroupChatSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupChatSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatSettingResponseMultiError) AllErrors() []error { return m }

// GroupChatSettingResponseValidationError is the validation error returned by
// GroupChatSettingResponse.Validate if the designated constraints aren't met.
type GroupChatSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatSettingResponseValidationError) ErrorName() string {
	return "GroupChatSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatSettingResponseValidationError{}

// Validate checks the field values on GroupChatRemoveMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatRemoveMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRemoveMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatRemoveMemberRequestMultiError, or nil if none found.
func (m *GroupChatRemoveMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRemoveMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for MembersIds

	if len(errors) > 0 {
		return GroupChatRemoveMemberRequestMultiError(errors)
	}

	return nil
}

// GroupChatRemoveMemberRequestMultiError is an error wrapping multiple
// validation errors returned by GroupChatRemoveMemberRequest.ValidateAll() if
// the designated constraints aren't met.
type GroupChatRemoveMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRemoveMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRemoveMemberRequestMultiError) AllErrors() []error { return m }

// GroupChatRemoveMemberRequestValidationError is the validation error returned
// by GroupChatRemoveMemberRequest.Validate if the designated constraints
// aren't met.
type GroupChatRemoveMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRemoveMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRemoveMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRemoveMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRemoveMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRemoveMemberRequestValidationError) ErrorName() string {
	return "GroupChatRemoveMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRemoveMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRemoveMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRemoveMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRemoveMemberRequestValidationError{}

// Validate checks the field values on GroupChatRemoveMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatRemoveMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRemoveMemberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GroupChatRemoveMemberResponseMultiError, or nil if none found.
func (m *GroupChatRemoveMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRemoveMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupChatRemoveMemberResponseMultiError(errors)
	}

	return nil
}

// GroupChatRemoveMemberResponseMultiError is an error wrapping multiple
// validation errors returned by GroupChatRemoveMemberResponse.ValidateAll()
// if the designated constraints aren't met.
type GroupChatRemoveMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRemoveMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRemoveMemberResponseMultiError) AllErrors() []error { return m }

// GroupChatRemoveMemberResponseValidationError is the validation error
// returned by GroupChatRemoveMemberResponse.Validate if the designated
// constraints aren't met.
type GroupChatRemoveMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRemoveMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRemoveMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRemoveMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRemoveMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRemoveMemberResponseValidationError) ErrorName() string {
	return "GroupChatRemoveMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRemoveMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRemoveMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRemoveMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRemoveMemberResponseValidationError{}

// Validate checks the field values on GroupChatAssignAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatAssignAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatAssignAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatAssignAdminRequestMultiError, or nil if none found.
func (m *GroupChatAssignAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatAssignAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	// no validation rules for Mode

	if len(errors) > 0 {
		return GroupChatAssignAdminRequestMultiError(errors)
	}

	return nil
}

// GroupChatAssignAdminRequestMultiError is an error wrapping multiple
// validation errors returned by GroupChatAssignAdminRequest.ValidateAll() if
// the designated constraints aren't met.
type GroupChatAssignAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatAssignAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatAssignAdminRequestMultiError) AllErrors() []error { return m }

// GroupChatAssignAdminRequestValidationError is the validation error returned
// by GroupChatAssignAdminRequest.Validate if the designated constraints
// aren't met.
type GroupChatAssignAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatAssignAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatAssignAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatAssignAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatAssignAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatAssignAdminRequestValidationError) ErrorName() string {
	return "GroupChatAssignAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatAssignAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatAssignAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatAssignAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatAssignAdminRequestValidationError{}

// Validate checks the field values on GroupChatMuteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatMuteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatMuteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatMuteRequestMultiError, or nil if none found.
func (m *GroupChatMuteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatMuteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Mode

	if len(errors) > 0 {
		return GroupChatMuteRequestMultiError(errors)
	}

	return nil
}

// GroupChatMuteRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatMuteRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatMuteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatMuteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatMuteRequestMultiError) AllErrors() []error { return m }

// GroupChatMuteRequestValidationError is the validation error returned by
// GroupChatMuteRequest.Validate if the designated constraints aren't met.
type GroupChatMuteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatMuteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatMuteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatMuteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatMuteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatMuteRequestValidationError) ErrorName() string {
	return "GroupChatMuteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatMuteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatMuteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatMuteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatMuteRequestValidationError{}

// Validate checks the field values on GroupChatMuteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatMuteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatMuteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatMuteResponseMultiError, or nil if none found.
func (m *GroupChatMuteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatMuteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupChatMuteResponseMultiError(errors)
	}

	return nil
}

// GroupChatMuteResponseMultiError is an error wrapping multiple validation
// errors returned by GroupChatMuteResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupChatMuteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatMuteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatMuteResponseMultiError) AllErrors() []error { return m }

// GroupChatMuteResponseValidationError is the validation error returned by
// GroupChatMuteResponse.Validate if the designated constraints aren't met.
type GroupChatMuteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatMuteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatMuteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatMuteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatMuteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatMuteResponseValidationError) ErrorName() string {
	return "GroupChatMuteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatMuteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatMuteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatMuteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatMuteResponseValidationError{}

// Validate checks the field values on GroupChatOvertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatOvertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatOvertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatOvertRequestMultiError, or nil if none found.
func (m *GroupChatOvertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatOvertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Mode

	if len(errors) > 0 {
		return GroupChatOvertRequestMultiError(errors)
	}

	return nil
}

// GroupChatOvertRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatOvertRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatOvertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatOvertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatOvertRequestMultiError) AllErrors() []error { return m }

// GroupChatOvertRequestValidationError is the validation error returned by
// GroupChatOvertRequest.Validate if the designated constraints aren't met.
type GroupChatOvertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatOvertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatOvertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatOvertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatOvertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatOvertRequestValidationError) ErrorName() string {
	return "GroupChatOvertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatOvertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatOvertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatOvertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatOvertRequestValidationError{}

// Validate checks the field values on GroupChatOvertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatOvertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatOvertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatOvertResponseMultiError, or nil if none found.
func (m *GroupChatOvertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatOvertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupChatOvertResponseMultiError(errors)
	}

	return nil
}

// GroupChatOvertResponseMultiError is an error wrapping multiple validation
// errors returned by GroupChatOvertResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupChatOvertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatOvertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatOvertResponseMultiError) AllErrors() []error { return m }

// GroupChatOvertResponseValidationError is the validation error returned by
// GroupChatOvertResponse.Validate if the designated constraints aren't met.
type GroupChatOvertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatOvertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatOvertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatOvertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatOvertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatOvertResponseValidationError) ErrorName() string {
	return "GroupChatOvertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatOvertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatOvertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatOvertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatOvertResponseValidationError{}

// Validate checks the field values on GroupChatRequestCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatRequestCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRequestCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GroupChatRequestCreateRequestMultiError, or nil if none found.
func (m *GroupChatRequestCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRequestCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupChatRequestCreateRequestMultiError(errors)
	}

	return nil
}

// GroupChatRequestCreateRequestMultiError is an error wrapping multiple
// validation errors returned by GroupChatRequestCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type GroupChatRequestCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRequestCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRequestCreateRequestMultiError) AllErrors() []error { return m }

// GroupChatRequestCreateRequestValidationError is the validation error
// returned by GroupChatRequestCreateRequest.Validate if the designated
// constraints aren't met.
type GroupChatRequestCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRequestCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRequestCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRequestCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRequestCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRequestCreateRequestValidationError) ErrorName() string {
	return "GroupChatRequestCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRequestCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRequestCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRequestCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRequestCreateRequestValidationError{}

// Validate checks the field values on GroupChatRequestAgreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatRequestAgreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRequestAgreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatRequestAgreeRequestMultiError, or nil if none found.
func (m *GroupChatRequestAgreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRequestAgreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplyId

	if len(errors) > 0 {
		return GroupChatRequestAgreeRequestMultiError(errors)
	}

	return nil
}

// GroupChatRequestAgreeRequestMultiError is an error wrapping multiple
// validation errors returned by GroupChatRequestAgreeRequest.ValidateAll() if
// the designated constraints aren't met.
type GroupChatRequestAgreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRequestAgreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRequestAgreeRequestMultiError) AllErrors() []error { return m }

// GroupChatRequestAgreeRequestValidationError is the validation error returned
// by GroupChatRequestAgreeRequest.Validate if the designated constraints
// aren't met.
type GroupChatRequestAgreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRequestAgreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRequestAgreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRequestAgreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRequestAgreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRequestAgreeRequestValidationError) ErrorName() string {
	return "GroupChatRequestAgreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRequestAgreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRequestAgreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRequestAgreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRequestAgreeRequestValidationError{}

// Validate checks the field values on GroupChatRequestDeclineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatRequestDeclineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRequestDeclineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GroupChatRequestDeclineRequestMultiError, or nil if none found.
func (m *GroupChatRequestDeclineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRequestDeclineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplyId

	if len(errors) > 0 {
		return GroupChatRequestDeclineRequestMultiError(errors)
	}

	return nil
}

// GroupChatRequestDeclineRequestMultiError is an error wrapping multiple
// validation errors returned by GroupChatRequestDeclineRequest.ValidateAll()
// if the designated constraints aren't met.
type GroupChatRequestDeclineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRequestDeclineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRequestDeclineRequestMultiError) AllErrors() []error { return m }

// GroupChatRequestDeclineRequestValidationError is the validation error
// returned by GroupChatRequestDeclineRequest.Validate if the designated
// constraints aren't met.
type GroupChatRequestDeclineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRequestDeclineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRequestDeclineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRequestDeclineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRequestDeclineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRequestDeclineRequestValidationError) ErrorName() string {
	return "GroupChatRequestDeclineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRequestDeclineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRequestDeclineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRequestDeclineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRequestDeclineRequestValidationError{}

// Validate checks the field values on GroupChatRequestDeclineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatRequestDeclineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRequestDeclineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GroupChatRequestDeclineResponseMultiError, or nil if none found.
func (m *GroupChatRequestDeclineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRequestDeclineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupChatRequestDeclineResponseMultiError(errors)
	}

	return nil
}

// GroupChatRequestDeclineResponseMultiError is an error wrapping multiple
// validation errors returned by GroupChatRequestDeclineResponse.ValidateAll()
// if the designated constraints aren't met.
type GroupChatRequestDeclineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRequestDeclineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRequestDeclineResponseMultiError) AllErrors() []error { return m }

// GroupChatRequestDeclineResponseValidationError is the validation error
// returned by GroupChatRequestDeclineResponse.Validate if the designated
// constraints aren't met.
type GroupChatRequestDeclineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRequestDeclineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRequestDeclineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRequestDeclineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRequestDeclineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRequestDeclineResponseValidationError) ErrorName() string {
	return "GroupChatRequestDeclineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRequestDeclineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRequestDeclineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRequestDeclineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRequestDeclineResponseValidationError{}

// Validate checks the field values on GroupRequestListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupRequestListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupRequestListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupRequestListRequestMultiError, or nil if none found.
func (m *GroupRequestListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupRequestListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupRequestListRequestMultiError(errors)
	}

	return nil
}

// GroupRequestListRequestMultiError is an error wrapping multiple validation
// errors returned by GroupRequestListRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupRequestListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupRequestListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupRequestListRequestMultiError) AllErrors() []error { return m }

// GroupRequestListRequestValidationError is the validation error returned by
// GroupRequestListRequest.Validate if the designated constraints aren't met.
type GroupRequestListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupRequestListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupRequestListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupRequestListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupRequestListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupRequestListRequestValidationError) ErrorName() string {
	return "GroupRequestListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupRequestListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupRequestListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupRequestListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupRequestListRequestValidationError{}

// Validate checks the field values on GroupChatRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatRequestListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRequestListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatRequestListResponseMultiError, or nil if none found.
func (m *GroupChatRequestListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRequestListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupChatRequestListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupChatRequestListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupChatRequestListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupChatRequestListResponseMultiError(errors)
	}

	return nil
}

// GroupChatRequestListResponseMultiError is an error wrapping multiple
// validation errors returned by GroupChatRequestListResponse.ValidateAll() if
// the designated constraints aren't met.
type GroupChatRequestListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRequestListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRequestListResponseMultiError) AllErrors() []error { return m }

// GroupChatRequestListResponseValidationError is the validation error returned
// by GroupChatRequestListResponse.Validate if the designated constraints
// aren't met.
type GroupChatRequestListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRequestListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRequestListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRequestListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRequestListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRequestListResponseValidationError) ErrorName() string {
	return "GroupChatRequestListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRequestListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRequestListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRequestListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRequestListResponseValidationError{}

// Validate checks the field values on GroupChatRequestAllResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatRequestAllResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRequestAllResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatRequestAllResponseMultiError, or nil if none found.
func (m *GroupChatRequestAllResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRequestAllResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupChatRequestAllResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupChatRequestAllResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupChatRequestAllResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupChatRequestAllResponseMultiError(errors)
	}

	return nil
}

// GroupChatRequestAllResponseMultiError is an error wrapping multiple
// validation errors returned by GroupChatRequestAllResponse.ValidateAll() if
// the designated constraints aren't met.
type GroupChatRequestAllResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRequestAllResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRequestAllResponseMultiError) AllErrors() []error { return m }

// GroupChatRequestAllResponseValidationError is the validation error returned
// by GroupChatRequestAllResponse.Validate if the designated constraints
// aren't met.
type GroupChatRequestAllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRequestAllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRequestAllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRequestAllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRequestAllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRequestAllResponseValidationError) ErrorName() string {
	return "GroupChatRequestAllResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRequestAllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRequestAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRequestAllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRequestAllResponseValidationError{}

// Validate checks the field values on GroupChatAdsDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatAdsDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatAdsDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatAdsDeleteRequestMultiError, or nil if none found.
func (m *GroupChatAdsDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatAdsDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for AdsId

	if len(errors) > 0 {
		return GroupChatAdsDeleteRequestMultiError(errors)
	}

	return nil
}

// GroupChatAdsDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatAdsDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type GroupChatAdsDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatAdsDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatAdsDeleteRequestMultiError) AllErrors() []error { return m }

// GroupChatAdsDeleteRequestValidationError is the validation error returned by
// GroupChatAdsDeleteRequest.Validate if the designated constraints aren't met.
type GroupChatAdsDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatAdsDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatAdsDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatAdsDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatAdsDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatAdsDeleteRequestValidationError) ErrorName() string {
	return "GroupChatAdsDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatAdsDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatAdsDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatAdsDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatAdsDeleteRequestValidationError{}

// Validate checks the field values on GroupChatAdsEditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatAdsEditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatAdsEditRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatAdsEditRequestMultiError, or nil if none found.
func (m *GroupChatAdsEditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatAdsEditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for AdsId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for IsTop

	// no validation rules for IsConfirm

	if len(errors) > 0 {
		return GroupChatAdsEditRequestMultiError(errors)
	}

	return nil
}

// GroupChatAdsEditRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatAdsEditRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatAdsEditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatAdsEditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatAdsEditRequestMultiError) AllErrors() []error { return m }

// GroupChatAdsEditRequestValidationError is the validation error returned by
// GroupChatAdsEditRequest.Validate if the designated constraints aren't met.
type GroupChatAdsEditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatAdsEditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatAdsEditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatAdsEditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatAdsEditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatAdsEditRequestValidationError) ErrorName() string {
	return "GroupChatAdsEditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatAdsEditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatAdsEditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatAdsEditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatAdsEditRequestValidationError{}

// Validate checks the field values on GroupChatAdsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatAdsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatAdsListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatAdsListRequestMultiError, or nil if none found.
func (m *GroupChatAdsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatAdsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupChatAdsListRequestMultiError(errors)
	}

	return nil
}

// GroupChatAdsListRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChatAdsListRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChatAdsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatAdsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatAdsListRequestMultiError) AllErrors() []error { return m }

// GroupChatAdsListRequestValidationError is the validation error returned by
// GroupChatAdsListRequest.Validate if the designated constraints aren't met.
type GroupChatAdsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatAdsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatAdsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatAdsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatAdsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatAdsListRequestValidationError) ErrorName() string {
	return "GroupChatAdsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatAdsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatAdsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatAdsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatAdsListRequestValidationError{}

// Validate checks the field values on GroupChatAdsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatAdsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatAdsListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatAdsListResponseMultiError, or nil if none found.
func (m *GroupChatAdsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatAdsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupChatAdsListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupChatAdsListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupChatAdsListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupChatAdsListResponseMultiError(errors)
	}

	return nil
}

// GroupChatAdsListResponseMultiError is an error wrapping multiple validation
// errors returned by GroupChatAdsListResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupChatAdsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatAdsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatAdsListResponseMultiError) AllErrors() []error { return m }

// GroupChatAdsListResponseValidationError is the validation error returned by
// GroupChatAdsListResponse.Validate if the designated constraints aren't met.
type GroupChatAdsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatAdsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatAdsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatAdsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatAdsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatAdsListResponseValidationError) ErrorName() string {
	return "GroupChatAdsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatAdsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatAdsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatAdsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatAdsListResponseValidationError{}

// Validate checks the field values on GroupChatListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChatListResponse_ItemMultiError, or nil if none found.
func (m *GroupChatListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for GroupName

	// no validation rules for Avatar

	// no validation rules for Description

	// no validation rules for Leader

	// no validation rules for IsDisturb

	// no validation rules for CreatorId

	if len(errors) > 0 {
		return GroupChatListResponse_ItemMultiError(errors)
	}

	return nil
}

// GroupChatListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by GroupChatListResponse_Item.ValidateAll() if
// the designated constraints aren't met.
type GroupChatListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatListResponse_ItemMultiError) AllErrors() []error { return m }

// GroupChatListResponse_ItemValidationError is the validation error returned
// by GroupChatListResponse_Item.Validate if the designated constraints aren't met.
type GroupChatListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatListResponse_ItemValidationError) ErrorName() string {
	return "GroupChatListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatListResponse_ItemValidationError{}

// Validate checks the field values on GroupChatMemberListResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GroupChatMemberListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatMemberListResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GroupChatMemberListResponse_ItemMultiError, or nil if none found.
func (m *GroupChatMemberListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatMemberListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Leader

	// no validation rules for IsMute

	if len(errors) > 0 {
		return GroupChatMemberListResponse_ItemMultiError(errors)
	}

	return nil
}

// GroupChatMemberListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by
// GroupChatMemberListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type GroupChatMemberListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatMemberListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatMemberListResponse_ItemMultiError) AllErrors() []error { return m }

// GroupChatMemberListResponse_ItemValidationError is the validation error
// returned by GroupChatMemberListResponse_Item.Validate if the designated
// constraints aren't met.
type GroupChatMemberListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatMemberListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatMemberListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatMemberListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatMemberListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatMemberListResponse_ItemValidationError) ErrorName() string {
	return "GroupChatMemberListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatMemberListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatMemberListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatMemberListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatMemberListResponse_ItemValidationError{}

// Validate checks the field values on GroupChatRequestListResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GroupChatRequestListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRequestListResponse_Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GroupChatRequestListResponse_ItemMultiError, or nil if none found.
func (m *GroupChatRequestListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRequestListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for GroupId

	// no validation rules for Avatar

	// no validation rules for Username

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GroupChatRequestListResponse_ItemMultiError(errors)
	}

	return nil
}

// GroupChatRequestListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by
// GroupChatRequestListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type GroupChatRequestListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRequestListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRequestListResponse_ItemMultiError) AllErrors() []error { return m }

// GroupChatRequestListResponse_ItemValidationError is the validation error
// returned by GroupChatRequestListResponse_Item.Validate if the designated
// constraints aren't met.
type GroupChatRequestListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRequestListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRequestListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRequestListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRequestListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRequestListResponse_ItemValidationError) ErrorName() string {
	return "GroupChatRequestListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRequestListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRequestListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRequestListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRequestListResponse_ItemValidationError{}

// Validate checks the field values on GroupChatRequestAllResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GroupChatRequestAllResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatRequestAllResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GroupChatRequestAllResponse_ItemMultiError, or nil if none found.
func (m *GroupChatRequestAllResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatRequestAllResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for GroupId

	// no validation rules for GroupName

	// no validation rules for Avatar

	// no validation rules for Username

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GroupChatRequestAllResponse_ItemMultiError(errors)
	}

	return nil
}

// GroupChatRequestAllResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by
// GroupChatRequestAllResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type GroupChatRequestAllResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatRequestAllResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatRequestAllResponse_ItemMultiError) AllErrors() []error { return m }

// GroupChatRequestAllResponse_ItemValidationError is the validation error
// returned by GroupChatRequestAllResponse_Item.Validate if the designated
// constraints aren't met.
type GroupChatRequestAllResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatRequestAllResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatRequestAllResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatRequestAllResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatRequestAllResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatRequestAllResponse_ItemValidationError) ErrorName() string {
	return "GroupChatRequestAllResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatRequestAllResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatRequestAllResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatRequestAllResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatRequestAllResponse_ItemValidationError{}

// Validate checks the field values on GroupChatAdsListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChatAdsListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChatAdsListResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GroupChatAdsListResponse_ItemMultiError, or nil if none found.
func (m *GroupChatAdsListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChatAdsListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for IsTop

	// no validation rules for IsConfirm

	// no validation rules for ConfirmUsers

	// no validation rules for Avatar

	// no validation rules for CreatorId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GroupChatAdsListResponse_ItemMultiError(errors)
	}

	return nil
}

// GroupChatAdsListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by GroupChatAdsListResponse_Item.ValidateAll()
// if the designated constraints aren't met.
type GroupChatAdsListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChatAdsListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChatAdsListResponse_ItemMultiError) AllErrors() []error { return m }

// GroupChatAdsListResponse_ItemValidationError is the validation error
// returned by GroupChatAdsListResponse_Item.Validate if the designated
// constraints aren't met.
type GroupChatAdsListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChatAdsListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChatAdsListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChatAdsListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChatAdsListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChatAdsListResponse_ItemValidationError) ErrorName() string {
	return "GroupChatAdsListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChatAdsListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChatAdsListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChatAdsListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChatAdsListResponse_ItemValidationError{}
