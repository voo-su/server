// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/sticker.proto

package v1_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StickerListItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StickerListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickerListItemMultiError, or nil if none found.
func (m *StickerListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaId

	// no validation rules for Src

	if len(errors) > 0 {
		return StickerListItemMultiError(errors)
	}

	return nil
}

// StickerListItemMultiError is an error wrapping multiple validation errors
// returned by StickerListItem.ValidateAll() if the designated constraints
// aren't met.
type StickerListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerListItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerListItemMultiError) AllErrors() []error { return m }

// StickerListItemValidationError is the validation error returned by
// StickerListItem.Validate if the designated constraints aren't met.
type StickerListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerListItemValidationError) ErrorName() string { return "StickerListItemValidationError" }

// Error satisfies the builtin error interface
func (e StickerListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerListItemValidationError{}

// Validate checks the field values on StickerSetSystemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickerSetSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerSetSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickerSetSystemRequestMultiError, or nil if none found.
func (m *StickerSetSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerSetSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StickerId

	// no validation rules for Type

	if len(errors) > 0 {
		return StickerSetSystemRequestMultiError(errors)
	}

	return nil
}

// StickerSetSystemRequestMultiError is an error wrapping multiple validation
// errors returned by StickerSetSystemRequest.ValidateAll() if the designated
// constraints aren't met.
type StickerSetSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerSetSystemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerSetSystemRequestMultiError) AllErrors() []error { return m }

// StickerSetSystemRequestValidationError is the validation error returned by
// StickerSetSystemRequest.Validate if the designated constraints aren't met.
type StickerSetSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerSetSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerSetSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerSetSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerSetSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerSetSystemRequestValidationError) ErrorName() string {
	return "StickerSetSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StickerSetSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerSetSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerSetSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerSetSystemRequestValidationError{}

// Validate checks the field values on StickerSetSystemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickerSetSystemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerSetSystemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickerSetSystemResponseMultiError, or nil if none found.
func (m *StickerSetSystemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerSetSystemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StickerId

	// no validation rules for Url

	// no validation rules for Name

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StickerSetSystemResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StickerSetSystemResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StickerSetSystemResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StickerSetSystemResponseMultiError(errors)
	}

	return nil
}

// StickerSetSystemResponseMultiError is an error wrapping multiple validation
// errors returned by StickerSetSystemResponse.ValidateAll() if the designated
// constraints aren't met.
type StickerSetSystemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerSetSystemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerSetSystemResponseMultiError) AllErrors() []error { return m }

// StickerSetSystemResponseValidationError is the validation error returned by
// StickerSetSystemResponse.Validate if the designated constraints aren't met.
type StickerSetSystemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerSetSystemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerSetSystemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerSetSystemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerSetSystemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerSetSystemResponseValidationError) ErrorName() string {
	return "StickerSetSystemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StickerSetSystemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerSetSystemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerSetSystemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerSetSystemResponseValidationError{}

// Validate checks the field values on StickerDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickerDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickerDeleteRequestMultiError, or nil if none found.
func (m *StickerDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ids

	if len(errors) > 0 {
		return StickerDeleteRequestMultiError(errors)
	}

	return nil
}

// StickerDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by StickerDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type StickerDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerDeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerDeleteRequestMultiError) AllErrors() []error { return m }

// StickerDeleteRequestValidationError is the validation error returned by
// StickerDeleteRequest.Validate if the designated constraints aren't met.
type StickerDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerDeleteRequestValidationError) ErrorName() string {
	return "StickerDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StickerDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerDeleteRequestValidationError{}

// Validate checks the field values on StickerSysListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickerSysListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerSysListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickerSysListResponseMultiError, or nil if none found.
func (m *StickerSysListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerSysListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StickerSysListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StickerSysListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StickerSysListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StickerSysListResponseMultiError(errors)
	}

	return nil
}

// StickerSysListResponseMultiError is an error wrapping multiple validation
// errors returned by StickerSysListResponse.ValidateAll() if the designated
// constraints aren't met.
type StickerSysListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerSysListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerSysListResponseMultiError) AllErrors() []error { return m }

// StickerSysListResponseValidationError is the validation error returned by
// StickerSysListResponse.Validate if the designated constraints aren't met.
type StickerSysListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerSysListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerSysListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerSysListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerSysListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerSysListResponseValidationError) ErrorName() string {
	return "StickerSysListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StickerSysListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerSysListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerSysListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerSysListResponseValidationError{}

// Validate checks the field values on StickerListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickerListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickerListResponseMultiError, or nil if none found.
func (m *StickerListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSysSticker() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StickerListResponseValidationError{
						field:  fmt.Sprintf("SysSticker[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StickerListResponseValidationError{
						field:  fmt.Sprintf("SysSticker[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StickerListResponseValidationError{
					field:  fmt.Sprintf("SysSticker[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCollectSticker() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StickerListResponseValidationError{
						field:  fmt.Sprintf("CollectSticker[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StickerListResponseValidationError{
						field:  fmt.Sprintf("CollectSticker[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StickerListResponseValidationError{
					field:  fmt.Sprintf("CollectSticker[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StickerListResponseMultiError(errors)
	}

	return nil
}

// StickerListResponseMultiError is an error wrapping multiple validation
// errors returned by StickerListResponse.ValidateAll() if the designated
// constraints aren't met.
type StickerListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerListResponseMultiError) AllErrors() []error { return m }

// StickerListResponseValidationError is the validation error returned by
// StickerListResponse.Validate if the designated constraints aren't met.
type StickerListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerListResponseValidationError) ErrorName() string {
	return "StickerListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StickerListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerListResponseValidationError{}

// Validate checks the field values on StickerUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickerUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickerUploadResponseMultiError, or nil if none found.
func (m *StickerUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaId

	// no validation rules for Src

	if len(errors) > 0 {
		return StickerUploadResponseMultiError(errors)
	}

	return nil
}

// StickerUploadResponseMultiError is an error wrapping multiple validation
// errors returned by StickerUploadResponse.ValidateAll() if the designated
// constraints aren't met.
type StickerUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerUploadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerUploadResponseMultiError) AllErrors() []error { return m }

// StickerUploadResponseValidationError is the validation error returned by
// StickerUploadResponse.Validate if the designated constraints aren't met.
type StickerUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerUploadResponseValidationError) ErrorName() string {
	return "StickerUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StickerUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerUploadResponseValidationError{}

// Validate checks the field values on StickerSysListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickerSysListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerSysListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickerSysListResponse_ItemMultiError, or nil if none found.
func (m *StickerSysListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerSysListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Icon

	// no validation rules for Status

	if len(errors) > 0 {
		return StickerSysListResponse_ItemMultiError(errors)
	}

	return nil
}

// StickerSysListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by StickerSysListResponse_Item.ValidateAll() if
// the designated constraints aren't met.
type StickerSysListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerSysListResponse_ItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerSysListResponse_ItemMultiError) AllErrors() []error { return m }

// StickerSysListResponse_ItemValidationError is the validation error returned
// by StickerSysListResponse_Item.Validate if the designated constraints
// aren't met.
type StickerSysListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerSysListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerSysListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerSysListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerSysListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerSysListResponse_ItemValidationError) ErrorName() string {
	return "StickerSysListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e StickerSysListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerSysListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerSysListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerSysListResponse_ItemValidationError{}

// Validate checks the field values on StickerListResponse_SysSticker with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickerListResponse_SysSticker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerListResponse_SysSticker with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StickerListResponse_SysStickerMultiError, or nil if none found.
func (m *StickerListResponse_SysSticker) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerListResponse_SysSticker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StickerId

	// no validation rules for Url

	// no validation rules for Name

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StickerListResponse_SysStickerValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StickerListResponse_SysStickerValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StickerListResponse_SysStickerValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StickerListResponse_SysStickerMultiError(errors)
	}

	return nil
}

// StickerListResponse_SysStickerMultiError is an error wrapping multiple
// validation errors returned by StickerListResponse_SysSticker.ValidateAll()
// if the designated constraints aren't met.
type StickerListResponse_SysStickerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerListResponse_SysStickerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerListResponse_SysStickerMultiError) AllErrors() []error { return m }

// StickerListResponse_SysStickerValidationError is the validation error
// returned by StickerListResponse_SysSticker.Validate if the designated
// constraints aren't met.
type StickerListResponse_SysStickerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerListResponse_SysStickerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerListResponse_SysStickerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerListResponse_SysStickerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerListResponse_SysStickerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerListResponse_SysStickerValidationError) ErrorName() string {
	return "StickerListResponse_SysStickerValidationError"
}

// Error satisfies the builtin error interface
func (e StickerListResponse_SysStickerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerListResponse_SysSticker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerListResponse_SysStickerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerListResponse_SysStickerValidationError{}
