// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/project.proto

package api_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProjectCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCreateRequestMultiError, or nil if none found.
func (m *ProjectCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return ProjectCreateRequestMultiError(errors)
	}

	return nil
}

// ProjectCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCreateRequestMultiError) AllErrors() []error { return m }

// ProjectCreateRequestValidationError is the validation error returned by
// ProjectCreateRequest.Validate if the designated constraints aren't met.
type ProjectCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCreateRequestValidationError) ErrorName() string {
	return "ProjectCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCreateRequestValidationError{}

// Validate checks the field values on ProjectCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectCreateResponseMultiError, or nil if none found.
func (m *ProjectCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ProjectCreateResponseMultiError(errors)
	}

	return nil
}

// ProjectCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectCreateResponseMultiError) AllErrors() []error { return m }

// ProjectCreateResponseValidationError is the validation error returned by
// ProjectCreateResponse.Validate if the designated constraints aren't met.
type ProjectCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectCreateResponseValidationError) ErrorName() string {
	return "ProjectCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectCreateResponseValidationError{}

// Validate checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListRequestMultiError, or nil if none found.
func (m *ProjectListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectListRequestMultiError(errors)
	}

	return nil
}

// ProjectListRequestMultiError is an error wrapping multiple validation errors
// returned by ProjectListRequest.ValidateAll() if the designated constraints
// aren't met.
type ProjectListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListRequestMultiError) AllErrors() []error { return m }

// ProjectListRequestValidationError is the validation error returned by
// ProjectListRequest.Validate if the designated constraints aren't met.
type ProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListRequestValidationError) ErrorName() string {
	return "ProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListRequestValidationError{}

// Validate checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListResponseMultiError, or nil if none found.
func (m *ProjectListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectListResponseMultiError(errors)
	}

	return nil
}

// ProjectListResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectListResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListResponseMultiError) AllErrors() []error { return m }

// ProjectListResponseValidationError is the validation error returned by
// ProjectListResponse.Validate if the designated constraints aren't met.
type ProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListResponseValidationError) ErrorName() string {
	return "ProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListResponseValidationError{}

// Validate checks the field values on ProjectMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectMembersRequestMultiError, or nil if none found.
func (m *ProjectMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return ProjectMembersRequestMultiError(errors)
	}

	return nil
}

// ProjectMembersRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMembersRequestMultiError) AllErrors() []error { return m }

// ProjectMembersRequestValidationError is the validation error returned by
// ProjectMembersRequest.Validate if the designated constraints aren't met.
type ProjectMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMembersRequestValidationError) ErrorName() string {
	return "ProjectMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMembersRequestValidationError{}

// Validate checks the field values on ProjectMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectMembersResponseMultiError, or nil if none found.
func (m *ProjectMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectMembersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectMembersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectMembersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectMembersResponseMultiError(errors)
	}

	return nil
}

// ProjectMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMembersResponseMultiError) AllErrors() []error { return m }

// ProjectMembersResponseValidationError is the validation error returned by
// ProjectMembersResponse.Validate if the designated constraints aren't met.
type ProjectMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMembersResponseValidationError) ErrorName() string {
	return "ProjectMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMembersResponseValidationError{}

// Validate checks the field values on ProjectInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectInviteRequestMultiError, or nil if none found.
func (m *ProjectInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Ids

	if len(errors) > 0 {
		return ProjectInviteRequestMultiError(errors)
	}

	return nil
}

// ProjectInviteRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectInviteRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectInviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectInviteRequestMultiError) AllErrors() []error { return m }

// ProjectInviteRequestValidationError is the validation error returned by
// ProjectInviteRequest.Validate if the designated constraints aren't met.
type ProjectInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectInviteRequestValidationError) ErrorName() string {
	return "ProjectInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectInviteRequestValidationError{}

// Validate checks the field values on ProjectInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectInviteResponseMultiError, or nil if none found.
func (m *ProjectInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProjectInviteResponseMultiError(errors)
	}

	return nil
}

// ProjectInviteResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectInviteResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectInviteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectInviteResponseMultiError) AllErrors() []error { return m }

// ProjectInviteResponseValidationError is the validation error returned by
// ProjectInviteResponse.Validate if the designated constraints aren't met.
type ProjectInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectInviteResponseValidationError) ErrorName() string {
	return "ProjectInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectInviteResponseValidationError{}

// Validate checks the field values on ProjectListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListResponse_ItemMultiError, or nil if none found.
func (m *ProjectListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if len(errors) > 0 {
		return ProjectListResponse_ItemMultiError(errors)
	}

	return nil
}

// ProjectListResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by ProjectListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type ProjectListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListResponse_ItemMultiError) AllErrors() []error { return m }

// ProjectListResponse_ItemValidationError is the validation error returned by
// ProjectListResponse_Item.Validate if the designated constraints aren't met.
type ProjectListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListResponse_ItemValidationError) ErrorName() string {
	return "ProjectListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListResponse_ItemValidationError{}

// Validate checks the field values on ProjectMembersResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectMembersResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMembersResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectMembersResponse_ItemMultiError, or nil if none found.
func (m *ProjectMembersResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMembersResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	if len(errors) > 0 {
		return ProjectMembersResponse_ItemMultiError(errors)
	}

	return nil
}

// ProjectMembersResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by ProjectMembersResponse_Item.ValidateAll() if
// the designated constraints aren't met.
type ProjectMembersResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMembersResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMembersResponse_ItemMultiError) AllErrors() []error { return m }

// ProjectMembersResponse_ItemValidationError is the validation error returned
// by ProjectMembersResponse_Item.Validate if the designated constraints
// aren't met.
type ProjectMembersResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMembersResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMembersResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMembersResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMembersResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMembersResponse_ItemValidationError) ErrorName() string {
	return "ProjectMembersResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectMembersResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMembersResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMembersResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMembersResponse_ItemValidationError{}
