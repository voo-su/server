// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/account.proto

package v1_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AccountResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountResponseMultiError, or nil if none found.
func (m *AccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Gender

	// no validation rules for Birthday

	// no validation rules for About

	if len(errors) > 0 {
		return AccountResponseMultiError(errors)
	}

	return nil
}

// AccountResponseMultiError is an error wrapping multiple validation errors
// returned by AccountResponse.ValidateAll() if the designated constraints
// aren't met.
type AccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountResponseMultiError) AllErrors() []error { return m }

// AccountResponseValidationError is the validation error returned by
// AccountResponse.Validate if the designated constraints aren't met.
type AccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountResponseValidationError) ErrorName() string { return "AccountResponseValidationError" }

// Error satisfies the builtin error interface
func (e AccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountResponseValidationError{}

// Validate checks the field values on AccountDetailUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountDetailUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountDetailUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountDetailUpdateRequestMultiError, or nil if none found.
func (m *AccountDetailUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountDetailUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Gender

	// no validation rules for Birthday

	// no validation rules for About

	if len(errors) > 0 {
		return AccountDetailUpdateRequestMultiError(errors)
	}

	return nil
}

// AccountDetailUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by AccountDetailUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type AccountDetailUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountDetailUpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountDetailUpdateRequestMultiError) AllErrors() []error { return m }

// AccountDetailUpdateRequestValidationError is the validation error returned
// by AccountDetailUpdateRequest.Validate if the designated constraints aren't met.
type AccountDetailUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountDetailUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountDetailUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountDetailUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountDetailUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountDetailUpdateRequestValidationError) ErrorName() string {
	return "AccountDetailUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountDetailUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountDetailUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountDetailUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountDetailUpdateRequestValidationError{}

// Validate checks the field values on AccountDetailUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountDetailUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountDetailUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountDetailUpdateResponseMultiError, or nil if none found.
func (m *AccountDetailUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountDetailUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountDetailUpdateResponseMultiError(errors)
	}

	return nil
}

// AccountDetailUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by AccountDetailUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type AccountDetailUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountDetailUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountDetailUpdateResponseMultiError) AllErrors() []error { return m }

// AccountDetailUpdateResponseValidationError is the validation error returned
// by AccountDetailUpdateResponse.Validate if the designated constraints
// aren't met.
type AccountDetailUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountDetailUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountDetailUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountDetailUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountDetailUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountDetailUpdateResponseValidationError) ErrorName() string {
	return "AccountDetailUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountDetailUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountDetailUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountDetailUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountDetailUpdateResponseValidationError{}

// Validate checks the field values on AccountUsernameUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountUsernameUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUsernameUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountUsernameUpdateRequestMultiError, or nil if none found.
func (m *AccountUsernameUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUsernameUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return AccountUsernameUpdateRequestMultiError(errors)
	}

	return nil
}

// AccountUsernameUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by AccountUsernameUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type AccountUsernameUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUsernameUpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUsernameUpdateRequestMultiError) AllErrors() []error { return m }

// AccountUsernameUpdateRequestValidationError is the validation error returned
// by AccountUsernameUpdateRequest.Validate if the designated constraints
// aren't met.
type AccountUsernameUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUsernameUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUsernameUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUsernameUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUsernameUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUsernameUpdateRequestValidationError) ErrorName() string {
	return "AccountUsernameUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountUsernameUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUsernameUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUsernameUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUsernameUpdateRequestValidationError{}

// Validate checks the field values on AccountUsernameUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountUsernameUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUsernameUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AccountUsernameUpdateResponseMultiError, or nil if none found.
func (m *AccountUsernameUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUsernameUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountUsernameUpdateResponseMultiError(errors)
	}

	return nil
}

// AccountUsernameUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by AccountUsernameUpdateResponse.ValidateAll()
// if the designated constraints aren't met.
type AccountUsernameUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUsernameUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUsernameUpdateResponseMultiError) AllErrors() []error { return m }

// AccountUsernameUpdateResponseValidationError is the validation error
// returned by AccountUsernameUpdateResponse.Validate if the designated
// constraints aren't met.
type AccountUsernameUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUsernameUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUsernameUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUsernameUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUsernameUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUsernameUpdateResponseValidationError) ErrorName() string {
	return "AccountUsernameUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountUsernameUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUsernameUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUsernameUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUsernameUpdateResponseValidationError{}

// Validate checks the field values on AccountEmailUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountEmailUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountEmailUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountEmailUpdateRequestMultiError, or nil if none found.
func (m *AccountEmailUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountEmailUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return AccountEmailUpdateRequestMultiError(errors)
	}

	return nil
}

// AccountEmailUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by AccountEmailUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type AccountEmailUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountEmailUpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountEmailUpdateRequestMultiError) AllErrors() []error { return m }

// AccountEmailUpdateRequestValidationError is the validation error returned by
// AccountEmailUpdateRequest.Validate if the designated constraints aren't met.
type AccountEmailUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountEmailUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountEmailUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountEmailUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountEmailUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountEmailUpdateRequestValidationError) ErrorName() string {
	return "AccountEmailUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountEmailUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountEmailUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountEmailUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountEmailUpdateRequestValidationError{}

// Validate checks the field values on AccountEmailUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountEmailUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountEmailUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountEmailUpdateResponseMultiError, or nil if none found.
func (m *AccountEmailUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountEmailUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountEmailUpdateResponseMultiError(errors)
	}

	return nil
}

// AccountEmailUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by AccountEmailUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type AccountEmailUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountEmailUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountEmailUpdateResponseMultiError) AllErrors() []error { return m }

// AccountEmailUpdateResponseValidationError is the validation error returned
// by AccountEmailUpdateResponse.Validate if the designated constraints aren't met.
type AccountEmailUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountEmailUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountEmailUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountEmailUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountEmailUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountEmailUpdateResponseValidationError) ErrorName() string {
	return "AccountEmailUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountEmailUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountEmailUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountEmailUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountEmailUpdateResponseValidationError{}

// Validate checks the field values on AccountPushRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountPushRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountPushRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountPushRequestMultiError, or nil if none found.
func (m *AccountPushRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountPushRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subscription

	if len(errors) > 0 {
		return AccountPushRequestMultiError(errors)
	}

	return nil
}

// AccountPushRequestMultiError is an error wrapping multiple validation errors
// returned by AccountPushRequest.ValidateAll() if the designated constraints
// aren't met.
type AccountPushRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountPushRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountPushRequestMultiError) AllErrors() []error { return m }

// AccountPushRequestValidationError is the validation error returned by
// AccountPushRequest.Validate if the designated constraints aren't met.
type AccountPushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountPushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountPushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountPushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountPushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountPushRequestValidationError) ErrorName() string {
	return "AccountPushRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountPushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountPushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountPushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountPushRequestValidationError{}
