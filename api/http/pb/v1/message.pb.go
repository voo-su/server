// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v4.25.1
// source: v1/message.proto

package v1_pb

import (
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageReceiver struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DialogType    int32                  `protobuf:"varint,1,opt,name=dialog_type,json=dialogType,proto3" json:"dialog_type,omitempty" binding:"required" label:"dialog_type"`
	ReceiverId    int32                  `protobuf:"varint,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty" binding:"required" label:"receiver_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageReceiver) Reset() {
	*x = MessageReceiver{}
	mi := &file_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageReceiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReceiver) ProtoMessage() {}

func (x *MessageReceiver) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReceiver.ProtoReflect.Descriptor instead.
func (*MessageReceiver) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *MessageReceiver) GetDialogType() int32 {
	if x != nil {
		return x.DialogType
	}
	return 0
}

func (x *MessageReceiver) GetReceiverId() int32 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

type PublishBaseMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" binding:"required" label:"type"`
	Receiver      *MessageReceiver       `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty" binding:"required" label:"receiver"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishBaseMessageRequest) Reset() {
	*x = PublishBaseMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishBaseMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishBaseMessageRequest) ProtoMessage() {}

func (x *PublishBaseMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishBaseMessageRequest.ProtoReflect.Descriptor instead.
func (*PublishBaseMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *PublishBaseMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublishBaseMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

type TextMessageRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Receiver      *MessageReceiver            `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" label:"receiver"`
	Type          string                      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" label:"type"`
	Content       string                      `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty" binding:"required" label:"content"`
	Mention       *TextMessageRequest_Mention `protobuf:"bytes,4,opt,name=mention,proto3" json:"mention,omitempty" label:"mention"`
	QuoteId       string                      `protobuf:"bytes,5,opt,name=quote_id,json=quoteId,proto3" json:"quote_id,omitempty" label:"quote_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextMessageRequest) Reset() {
	*x = TextMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessageRequest) ProtoMessage() {}

func (x *TextMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessageRequest.ProtoReflect.Descriptor instead.
func (*TextMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *TextMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *TextMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TextMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TextMessageRequest) GetMention() *TextMessageRequest_Mention {
	if x != nil {
		return x.Mention
	}
	return nil
}

func (x *TextMessageRequest) GetQuoteId() string {
	if x != nil {
		return x.QuoteId
	}
	return ""
}

type ImageMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receiver      *MessageReceiver       `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" label:"receiver"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" label:"type"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty" binding:"required" label:"url"`
	Width         int32                  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty" binding:"required" label:"width"`
	Height        int32                  `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty" binding:"required" label:"height"`
	Size          int32                  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty" binding:"required" label:"size"`
	QuoteId       string                 `protobuf:"bytes,7,opt,name=quote_id,json=quoteId,proto3" json:"quote_id,omitempty" label:"quote_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageMessageRequest) Reset() {
	*x = ImageMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMessageRequest) ProtoMessage() {}

func (x *ImageMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMessageRequest.ProtoReflect.Descriptor instead.
func (*ImageMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *ImageMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *ImageMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ImageMessageRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImageMessageRequest) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageMessageRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageMessageRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ImageMessageRequest) GetQuoteId() string {
	if x != nil {
		return x.QuoteId
	}
	return ""
}

type VideoMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receiver      *MessageReceiver       `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" label:"receiver"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" label:"type"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty" binding:"required" label:"url"`
	Duration      int32                  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty" binding:"required,gt=0" label:"duration"`
	Size          int32                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty" binding:"required" label:"size"`
	Cover         string                 `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoMessageRequest) Reset() {
	*x = VideoMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMessageRequest) ProtoMessage() {}

func (x *VideoMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMessageRequest.ProtoReflect.Descriptor instead.
func (*VideoMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *VideoMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *VideoMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VideoMessageRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VideoMessageRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoMessageRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VideoMessageRequest) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

type AudioMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receiver      *MessageReceiver       `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" label:"receiver"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" label:"type"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty" binding:"required" label:"url"`
	Duration      int32                  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty" binding:"required,gt=0" label:"duration"`
	Size          int32                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty" binding:"required" label:"size"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioMessageRequest) Reset() {
	*x = AudioMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMessageRequest) ProtoMessage() {}

func (x *AudioMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMessageRequest.ProtoReflect.Descriptor instead.
func (*AudioMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *AudioMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *AudioMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AudioMessageRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AudioMessageRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AudioMessageRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FileMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receiver      *MessageReceiver       `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" label:"receiver"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" label:"type"`
	UploadId      string                 `protobuf:"bytes,3,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty" binding:"required" label:"upload_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileMessageRequest) Reset() {
	*x = FileMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMessageRequest) ProtoMessage() {}

func (x *FileMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMessageRequest.ProtoReflect.Descriptor instead.
func (*FileMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *FileMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *FileMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileMessageRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

type VoteMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receiver      *MessageReceiver       `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" label:"options"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" label:"options"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" binding:"required" label:"title"`
	Mode          int32                  `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty" binding:"required" label:"mode"`
	Anonymous     int32                  `protobuf:"varint,5,opt,name=anonymous,proto3" json:"anonymous,omitempty" binding:"required" label:"anonymous"`
	Options       []string               `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty" binding:"required" label:"options"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteMessageRequest) Reset() {
	*x = VoteMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteMessageRequest) ProtoMessage() {}

func (x *VoteMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteMessageRequest.ProtoReflect.Descriptor instead.
func (*VoteMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *VoteMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *VoteMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VoteMessageRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VoteMessageRequest) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *VoteMessageRequest) GetAnonymous() int32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *VoteMessageRequest) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type VoteSendMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReceiverId    int64                  `protobuf:"varint,1,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id" binding:"required,numeric,gt=0" form:"receiver_id" label:"receiver_id"`
	Mode          int32                  `protobuf:"varint,2,opt,name=mode,proto3" json:"mode" binding:"oneof=0 1" form:"mode" label:"mode"`
	Anonymous     int32                  `protobuf:"varint,3,opt,name=anonymous,proto3" json:"anonymous" binding:"oneof=0 1" form:"anonymous" label:"anonymous"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title" binding:"required" form:"title" label:"title"`
	Options       []string               `protobuf:"bytes,5,rep,name=options,proto3" json:"options" form:"options" label:"options"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteSendMessageRequest) Reset() {
	*x = VoteSendMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteSendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteSendMessageRequest) ProtoMessage() {}

func (x *VoteSendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteSendMessageRequest.ProtoReflect.Descriptor instead.
func (*VoteSendMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *VoteSendMessageRequest) GetReceiverId() int64 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *VoteSendMessageRequest) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *VoteSendMessageRequest) GetAnonymous() int32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *VoteSendMessageRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VoteSendMessageRequest) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type StickerMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	StickerId     int32                  `protobuf:"varint,2,opt,name=sticker_id,json=stickerId,proto3" json:"sticker_id,omitempty" binding:"required"`
	Receiver      *MessageReceiver       `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StickerMessageRequest) Reset() {
	*x = StickerMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StickerMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerMessageRequest) ProtoMessage() {}

func (x *StickerMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerMessageRequest.ProtoReflect.Descriptor instead.
func (*StickerMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *StickerMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StickerMessageRequest) GetStickerId() int32 {
	if x != nil {
		return x.StickerId
	}
	return 0
}

func (x *StickerMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

type ForwardMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receiver      *MessageReceiver       `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" label:"receiver"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" label:"type"`
	Mode          int32                  `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty" binding:"required" label:"mode"`
	MessageIds    []int32                `protobuf:"varint,4,rep,packed,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty" binding:"required" label:"message_ids"`
	Gids          []int32                `protobuf:"varint,5,rep,packed,name=gids,proto3" json:"gids,omitempty" label:"gids"`
	Uids          []int32                `protobuf:"varint,6,rep,packed,name=uids,proto3" json:"uids,omitempty" label:"uids"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardMessageRequest) Reset() {
	*x = ForwardMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardMessageRequest) ProtoMessage() {}

func (x *ForwardMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardMessageRequest.ProtoReflect.Descriptor instead.
func (*ForwardMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{10}
}

func (x *ForwardMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *ForwardMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ForwardMessageRequest) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *ForwardMessageRequest) GetMessageIds() []int32 {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

func (x *ForwardMessageRequest) GetGids() []int32 {
	if x != nil {
		return x.Gids
	}
	return nil
}

func (x *ForwardMessageRequest) GetUids() []int32 {
	if x != nil {
		return x.Uids
	}
	return nil
}

type MixedMessageRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Receiver      *MessageReceiver            `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" label:"receiver"`
	Type          string                      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" label:"type"`
	Items         []*MixedMessageRequest_Item `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty" label:"items"`
	QuoteId       string                      `protobuf:"bytes,4,opt,name=quote_id,json=quoteId,proto3" json:"quote_id,omitempty" label:"quote_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MixedMessageRequest) Reset() {
	*x = MixedMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MixedMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedMessageRequest) ProtoMessage() {}

func (x *MixedMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedMessageRequest.ProtoReflect.Descriptor instead.
func (*MixedMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{11}
}

func (x *MixedMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *MixedMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MixedMessageRequest) GetItems() []*MixedMessageRequest_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MixedMessageRequest) GetQuoteId() string {
	if x != nil {
		return x.QuoteId
	}
	return ""
}

type CodeMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receiver      *MessageReceiver       `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" label:"receiver"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" label:"type"`
	Lang          string                 `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty" binding:"required" label:"lang"`
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty" binding:"required" label:"code"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeMessageRequest) Reset() {
	*x = CodeMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeMessageRequest) ProtoMessage() {}

func (x *CodeMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeMessageRequest.ProtoReflect.Descriptor instead.
func (*CodeMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{12}
}

func (x *CodeMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *CodeMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CodeMessageRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *CodeMessageRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type LocationMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receiver      *MessageReceiver       `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Longitude     string                 `protobuf:"bytes,3,opt,name=longitude,proto3" json:"longitude,omitempty" binding:"required" label:"longitude"`
	Latitude      string                 `protobuf:"bytes,4,opt,name=latitude,proto3" json:"latitude,omitempty" binding:"required" label:"latitude"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" binding:"required" label:"description"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocationMessageRequest) Reset() {
	*x = LocationMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMessageRequest) ProtoMessage() {}

func (x *LocationMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMessageRequest.ProtoReflect.Descriptor instead.
func (*LocationMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{13}
}

func (x *LocationMessageRequest) GetReceiver() *MessageReceiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *LocationMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LocationMessageRequest) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *LocationMessageRequest) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *LocationMessageRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type KeyboardMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         string                 `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Data          *KeyboardMessage_Data  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyboardMessage) Reset() {
	*x = KeyboardMessage{}
	mi := &file_v1_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyboardMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyboardMessage) ProtoMessage() {}

func (x *KeyboardMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyboardMessage.ProtoReflect.Descriptor instead.
func (*KeyboardMessage) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{14}
}

func (x *KeyboardMessage) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *KeyboardMessage) GetData() *KeyboardMessage_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordId      int64                  `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id" binding:"required,numeric,gt=0" form:"record_id" label:"record_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectMessageRequest) Reset() {
	*x = CollectMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectMessageRequest) ProtoMessage() {}

func (x *CollectMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectMessageRequest.ProtoReflect.Descriptor instead.
func (*CollectMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{15}
}

func (x *CollectMessageRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

type DownloadChatFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordId      int64                  `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"cr_id" binding:"required,min=1" form:"cr_id" label:"cr_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadChatFileRequest) Reset() {
	*x = DownloadChatFileRequest{}
	mi := &file_v1_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadChatFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChatFileRequest) ProtoMessage() {}

func (x *DownloadChatFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChatFileRequest.ProtoReflect.Descriptor instead.
func (*DownloadChatFileRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{16}
}

func (x *DownloadChatFileRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

type GetDialogRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DialogType    int64                  `protobuf:"varint,1,opt,name=dialog_type,json=dialogType,proto3" json:"dialog_type" binding:"required,oneof=1 2" form:"dialog_type" label:"dialog_type"`
	MsgType       int64                  `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3" json:"msg_type" binding:"numeric" form:"msg_type" label:"msg_type"`
	ReceiverId    int64                  `protobuf:"varint,3,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id" binding:"required,numeric,min=1" form:"receiver_id" label:"receiver_id"`
	RecordId      int64                  `protobuf:"varint,4,opt,name=record_id,json=recordId,proto3" json:"record_id" binding:"min=0,numeric" form:"record_id" label:"record_id"`
	Limit         int64                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit" binding:"required,numeric,max=100" form:"limit" label:"limit"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDialogRecordsRequest) Reset() {
	*x = GetDialogRecordsRequest{}
	mi := &file_v1_message_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDialogRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDialogRecordsRequest) ProtoMessage() {}

func (x *GetDialogRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDialogRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetDialogRecordsRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{17}
}

func (x *GetDialogRecordsRequest) GetDialogType() int64 {
	if x != nil {
		return x.DialogType
	}
	return 0
}

func (x *GetDialogRecordsRequest) GetMsgType() int64 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *GetDialogRecordsRequest) GetReceiverId() int64 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *GetDialogRecordsRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *GetDialogRecordsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type VoteMessageHandleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordId      int64                  `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id" binding:"required,gt=0" form:"record_id" label:"record_id"`
	Options       string                 `protobuf:"bytes,2,opt,name=options,proto3" json:"options" binding:"required" form:"options" label:"options"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteMessageHandleRequest) Reset() {
	*x = VoteMessageHandleRequest{}
	mi := &file_v1_message_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteMessageHandleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteMessageHandleRequest) ProtoMessage() {}

func (x *VoteMessageHandleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteMessageHandleRequest.ProtoReflect.Descriptor instead.
func (*VoteMessageHandleRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{18}
}

func (x *VoteMessageHandleRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *VoteMessageHandleRequest) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

type DeleteMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DialogType    int64                  `protobuf:"varint,1,opt,name=dialog_type,json=dialogType,proto3" json:"dialog_type" binding:"required,oneof=1 2" form:"dialog_type" label:"dialog_type"`
	ReceiverId    int64                  `protobuf:"varint,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id" binding:"required,numeric,gt=0" form:"receiver_id" label:"receiver_id"`
	RecordIds     string                 `protobuf:"bytes,3,opt,name=record_ids,json=recordIds,proto3" json:"record_id" binding:"required,ids" form:"record_id" label:"record_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMessageRequest) Reset() {
	*x = DeleteMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageRequest) ProtoMessage() {}

func (x *DeleteMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageRequest.ProtoReflect.Descriptor instead.
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteMessageRequest) GetDialogType() int64 {
	if x != nil {
		return x.DialogType
	}
	return 0
}

func (x *DeleteMessageRequest) GetReceiverId() int64 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *DeleteMessageRequest) GetRecordIds() string {
	if x != nil {
		return x.RecordIds
	}
	return ""
}

type RevokeMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgId         string                 `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id" binding:"required" form:"msg_id" label:"msg_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeMessageRequest) Reset() {
	*x = RevokeMessageRequest{}
	mi := &file_v1_message_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeMessageRequest) ProtoMessage() {}

func (x *RevokeMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeMessageRequest.ProtoReflect.Descriptor instead.
func (*RevokeMessageRequest) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{20}
}

func (x *RevokeMessageRequest) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

type TextMessageRequest_Mention struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	All           int32                  `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty" label:"all"`
	Uids          []int32                `protobuf:"varint,2,rep,packed,name=uids,proto3" json:"uids,omitempty" label:"uids"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextMessageRequest_Mention) Reset() {
	*x = TextMessageRequest_Mention{}
	mi := &file_v1_message_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextMessageRequest_Mention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessageRequest_Mention) ProtoMessage() {}

func (x *TextMessageRequest_Mention) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessageRequest_Mention.ProtoReflect.Descriptor instead.
func (*TextMessageRequest_Mention) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TextMessageRequest_Mention) GetAll() int32 {
	if x != nil {
		return x.All
	}
	return 0
}

func (x *TextMessageRequest_Mention) GetUids() []int32 {
	if x != nil {
		return x.Uids
	}
	return nil
}

type MixedMessageRequest_Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty" label:"type"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" label:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MixedMessageRequest_Item) Reset() {
	*x = MixedMessageRequest_Item{}
	mi := &file_v1_message_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MixedMessageRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedMessageRequest_Item) ProtoMessage() {}

func (x *MixedMessageRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedMessageRequest_Item.ProtoReflect.Descriptor instead.
func (*MixedMessageRequest_Item) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{11, 0}
}

func (x *MixedMessageRequest_Item) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MixedMessageRequest_Item) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type KeyboardMessage_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderId      int32                  `protobuf:"varint,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	ReceiverId    int32                  `protobuf:"varint,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyboardMessage_Data) Reset() {
	*x = KeyboardMessage_Data{}
	mi := &file_v1_message_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyboardMessage_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyboardMessage_Data) ProtoMessage() {}

func (x *KeyboardMessage_Data) ProtoReflect() protoreflect.Message {
	mi := &file_v1_message_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyboardMessage_Data.ProtoReflect.Descriptor instead.
func (*KeyboardMessage_Data) Descriptor() ([]byte, []int) {
	return file_v1_message_proto_rawDescGZIP(), []int{14, 0}
}

func (x *KeyboardMessage_Data) GetSenderId() int32 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *KeyboardMessage_Data) GetReceiverId() int32 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

var File_v1_message_proto protoreflect.FileDescriptor

var file_v1_message_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x13, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x0f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x4c, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x9a, 0x84, 0x9e, 0x03, 0x26, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x3a, 0x22, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x2b, 0x9a, 0x84, 0x9e, 0x03, 0x26, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x19,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x28, 0x9a, 0x84, 0x9e, 0x03,
	0x23, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x9e,
	0x03, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x15, 0x9a, 0x84,
	0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e,
	0x03, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x9a, 0x84, 0x9e, 0x03, 0x22, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x07,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0x52, 0x07, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x54, 0x0a, 0x07, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x10, 0x9a, 0x84, 0x9e, 0x03, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x61,
	0x6c, 0x6c, 0x22, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x3a, 0x22, 0x75, 0x69, 0x64, 0x73, 0x22, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22,
	0xa4, 0x03, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x15,
	0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a,
	0x84, 0x9e, 0x03, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x3a, 0x22, 0x75, 0x72, 0x6c, 0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x9a, 0x84,
	0x9e, 0x03, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x22, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x9a, 0x84, 0x9e, 0x03,
	0x21, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x3a, 0x22, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x07, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03,
	0x1e, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x75, 0x72, 0x6c, 0x22, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x49, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2d, 0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67,
	0x74, 0x3d, 0x30, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x9a,
	0x84, 0x9e, 0x03, 0x1f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22,
	0xc0, 0x02, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x15,
	0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a,
	0x84, 0x9e, 0x03, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x3a, 0x22, 0x75, 0x72, 0x6c, 0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x49, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2d, 0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x3a, 0x22, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x9a, 0x84, 0x9e,
	0x03, 0x24, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64,
	0x22, 0x88, 0x03, 0x0a, 0x12, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x14,
	0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x9a, 0x84,
	0x9e, 0x03, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x9a, 0x84, 0x9e, 0x03, 0x20, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x3a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x29, 0x9a, 0x84, 0x9e, 0x03, 0x24, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x3a, 0x22, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0x52, 0x09, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x27, 0x9a, 0x84, 0x9e, 0x03, 0x22,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfd, 0x03, 0x0a, 0x16,
	0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x5e, 0x9a, 0x84, 0x9e,
	0x03, 0x59, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3d, 0x9a, 0x84, 0x9e, 0x03, 0x38, 0x66, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x3d, 0x30, 0x20, 0x31, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x6a, 0x0a, 0x09, 0x61, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x4c, 0x9a,
	0x84, 0x9e, 0x03, 0x47, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x30, 0x20, 0x31, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a,
	0x22, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0x52, 0x09, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x9a, 0x84, 0x9e, 0x03, 0x3a, 0x66, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4c, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x32,
	0x9a, 0x84, 0x9e, 0x03, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x15,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x9a,
	0x84, 0x9e, 0x03, 0x12, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x22, 0xdc, 0x02, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a,
	0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x2b, 0x9a, 0x84, 0x9e, 0x03,
	0x26, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x67, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x05, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x67,
	0x69, 0x64, 0x73, 0x22, 0x52, 0x04, 0x67, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x75, 0x69, 0x64, 0x73, 0x22, 0x52, 0x04, 0x75, 0x69, 0x64,
	0x73, 0x22, 0xdd, 0x02, 0x0a, 0x13, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x78,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x3a, 0x22, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x07, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x1a, 0x5d, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xf7, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42,
	0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x52, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x16,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x9a, 0x84, 0x9e, 0x03, 0x24, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x9a, 0x84, 0x9e, 0x03, 0x23, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0x9a, 0x84, 0x9e, 0x03, 0x26, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x4b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x44, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x75, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x58, 0x9a, 0x84, 0x9e, 0x03, 0x53, 0x66, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x20, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x45, 0x9a, 0x84, 0x9e, 0x03, 0x40, 0x66, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x63, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x63, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x31, 0x22, 0x20,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x63, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xd4, 0x04, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x5b, 0x9a, 0x84, 0x9e, 0x03, 0x56, 0x66,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x31, 0x20, 0x32,
	0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x47, 0x9a, 0x84, 0x9e, 0x03, 0x42, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x3a, 0x22, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x5f, 0x9a, 0x84, 0x9e,
	0x03, 0x5a, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x31, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x50, 0x9a, 0x84, 0x9e,
	0x03, 0x4b, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x6d, 0x69, 0x6e,
	0x3d, 0x30, 0x2c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x4f, 0x9a, 0x84, 0x9e, 0x03, 0x4a, 0x66, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x2c, 0x6d, 0x61, 0x78, 0x3d, 0x31, 0x30, 0x30, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a,
	0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xea,
	0x01, 0x0a, 0x18, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x50,
	0x9a, 0x84, 0x9e, 0x03, 0x4b, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x9a, 0x84, 0x9e,
	0x03, 0x40, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x20,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x03, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x5b, 0x9a, 0x84, 0x9e, 0x03, 0x56,
	0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x31, 0x20,
	0x32, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x7f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x5e, 0x9a, 0x84, 0x9e, 0x03, 0x59, 0x66, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x22, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x2c, 0x67, 0x74,
	0x3d, 0x30, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x9a, 0x84, 0x9e, 0x03, 0x4a, 0x66, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x20,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x2c, 0x69, 0x64, 0x73, 0x22, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x73, 0x22, 0x71, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x06, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x9a, 0x84, 0x9e,
	0x03, 0x3d, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x22, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_message_proto_rawDescOnce sync.Once
	file_v1_message_proto_rawDescData = file_v1_message_proto_rawDesc
)

func file_v1_message_proto_rawDescGZIP() []byte {
	file_v1_message_proto_rawDescOnce.Do(func() {
		file_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_message_proto_rawDescData)
	})
	return file_v1_message_proto_rawDescData
}

var file_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_v1_message_proto_goTypes = []any{
	(*MessageReceiver)(nil),            // 0: v1.MessageReceiver
	(*PublishBaseMessageRequest)(nil),  // 1: v1.PublishBaseMessageRequest
	(*TextMessageRequest)(nil),         // 2: v1.TextMessageRequest
	(*ImageMessageRequest)(nil),        // 3: v1.ImageMessageRequest
	(*VideoMessageRequest)(nil),        // 4: v1.VideoMessageRequest
	(*AudioMessageRequest)(nil),        // 5: v1.AudioMessageRequest
	(*FileMessageRequest)(nil),         // 6: v1.FileMessageRequest
	(*VoteMessageRequest)(nil),         // 7: v1.VoteMessageRequest
	(*VoteSendMessageRequest)(nil),     // 8: v1.VoteSendMessageRequest
	(*StickerMessageRequest)(nil),      // 9: v1.StickerMessageRequest
	(*ForwardMessageRequest)(nil),      // 10: v1.ForwardMessageRequest
	(*MixedMessageRequest)(nil),        // 11: v1.MixedMessageRequest
	(*CodeMessageRequest)(nil),         // 12: v1.CodeMessageRequest
	(*LocationMessageRequest)(nil),     // 13: v1.LocationMessageRequest
	(*KeyboardMessage)(nil),            // 14: v1.KeyboardMessage
	(*CollectMessageRequest)(nil),      // 15: v1.CollectMessageRequest
	(*DownloadChatFileRequest)(nil),    // 16: v1.DownloadChatFileRequest
	(*GetDialogRecordsRequest)(nil),    // 17: v1.GetDialogRecordsRequest
	(*VoteMessageHandleRequest)(nil),   // 18: v1.VoteMessageHandleRequest
	(*DeleteMessageRequest)(nil),       // 19: v1.DeleteMessageRequest
	(*RevokeMessageRequest)(nil),       // 20: v1.RevokeMessageRequest
	(*TextMessageRequest_Mention)(nil), // 21: v1.TextMessageRequest.Mention
	(*MixedMessageRequest_Item)(nil),   // 22: v1.MixedMessageRequest.Item
	(*KeyboardMessage_Data)(nil),       // 23: v1.KeyboardMessage.Data
}
var file_v1_message_proto_depIdxs = []int32{
	0,  // 0: v1.PublishBaseMessageRequest.receiver:type_name -> v1.MessageReceiver
	0,  // 1: v1.TextMessageRequest.receiver:type_name -> v1.MessageReceiver
	21, // 2: v1.TextMessageRequest.mention:type_name -> v1.TextMessageRequest.Mention
	0,  // 3: v1.ImageMessageRequest.receiver:type_name -> v1.MessageReceiver
	0,  // 4: v1.VideoMessageRequest.receiver:type_name -> v1.MessageReceiver
	0,  // 5: v1.AudioMessageRequest.receiver:type_name -> v1.MessageReceiver
	0,  // 6: v1.FileMessageRequest.receiver:type_name -> v1.MessageReceiver
	0,  // 7: v1.VoteMessageRequest.receiver:type_name -> v1.MessageReceiver
	0,  // 8: v1.StickerMessageRequest.receiver:type_name -> v1.MessageReceiver
	0,  // 9: v1.ForwardMessageRequest.receiver:type_name -> v1.MessageReceiver
	0,  // 10: v1.MixedMessageRequest.receiver:type_name -> v1.MessageReceiver
	22, // 11: v1.MixedMessageRequest.items:type_name -> v1.MixedMessageRequest.Item
	0,  // 12: v1.CodeMessageRequest.receiver:type_name -> v1.MessageReceiver
	0,  // 13: v1.LocationMessageRequest.receiver:type_name -> v1.MessageReceiver
	23, // 14: v1.KeyboardMessage.data:type_name -> v1.KeyboardMessage.Data
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_v1_message_proto_init() }
func file_v1_message_proto_init() {
	if File_v1_message_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_message_proto_goTypes,
		DependencyIndexes: file_v1_message_proto_depIdxs,
		MessageInfos:      file_v1_message_proto_msgTypes,
	}.Build()
	File_v1_message_proto = out.File
	file_v1_message_proto_rawDesc = nil
	file_v1_message_proto_goTypes = nil
	file_v1_message_proto_depIdxs = nil
}
