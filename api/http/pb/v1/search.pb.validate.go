// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/search.proto

package v1_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SearchUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUsersRequestMultiError, or nil if none found.
func (m *SearchUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return SearchUsersRequestMultiError(errors)
	}

	return nil
}

// SearchUsersRequestMultiError is an error wrapping multiple validation errors
// returned by SearchUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUsersRequestMultiError) AllErrors() []error { return m }

// SearchUsersRequestValidationError is the validation error returned by
// SearchUsersRequest.Validate if the designated constraints aren't met.
type SearchUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUsersRequestValidationError) ErrorName() string {
	return "SearchUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUsersRequestValidationError{}

// Validate checks the field values on SearchUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserResponseMultiError, or nil if none found.
func (m *SearchUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUserResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUserResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUserResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchUserResponseMultiError(errors)
	}

	return nil
}

// SearchUserResponseMultiError is an error wrapping multiple validation errors
// returned by SearchUserResponse.ValidateAll() if the designated constraints
// aren't met.
type SearchUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserResponseMultiError) AllErrors() []error { return m }

// SearchUserResponseValidationError is the validation error returned by
// SearchUserResponse.Validate if the designated constraints aren't met.
type SearchUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserResponseValidationError) ErrorName() string {
	return "SearchUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserResponseValidationError{}

// Validate checks the field values on SearchGroupChatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchGroupChatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchGroupChatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchGroupChatsRequestMultiError, or nil if none found.
func (m *SearchGroupChatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchGroupChatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Name

	if len(errors) > 0 {
		return SearchGroupChatsRequestMultiError(errors)
	}

	return nil
}

// SearchGroupChatsRequestMultiError is an error wrapping multiple validation
// errors returned by SearchGroupChatsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchGroupChatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchGroupChatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchGroupChatsRequestMultiError) AllErrors() []error { return m }

// SearchGroupChatsRequestValidationError is the validation error returned by
// SearchGroupChatsRequest.Validate if the designated constraints aren't met.
type SearchGroupChatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchGroupChatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchGroupChatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchGroupChatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchGroupChatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchGroupChatsRequestValidationError) ErrorName() string {
	return "SearchGroupChatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchGroupChatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchGroupChatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchGroupChatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchGroupChatsRequestValidationError{}

// Validate checks the field values on SearchGroupChatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchGroupChatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchGroupChatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchGroupChatsResponseMultiError, or nil if none found.
func (m *SearchGroupChatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchGroupChatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchGroupChatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchGroupChatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchGroupChatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Next

	if len(errors) > 0 {
		return SearchGroupChatsResponseMultiError(errors)
	}

	return nil
}

// SearchGroupChatsResponseMultiError is an error wrapping multiple validation
// errors returned by SearchGroupChatsResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchGroupChatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchGroupChatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchGroupChatsResponseMultiError) AllErrors() []error { return m }

// SearchGroupChatsResponseValidationError is the validation error returned by
// SearchGroupChatsResponse.Validate if the designated constraints aren't met.
type SearchGroupChatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchGroupChatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchGroupChatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchGroupChatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchGroupChatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchGroupChatsResponseValidationError) ErrorName() string {
	return "SearchGroupChatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchGroupChatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchGroupChatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchGroupChatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchGroupChatsResponseValidationError{}

// Validate checks the field values on SearchUserResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserResponse_ItemMultiError, or nil if none found.
func (m *SearchUserResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Name

	// no validation rules for Surname

	if len(errors) > 0 {
		return SearchUserResponse_ItemMultiError(errors)
	}

	return nil
}

// SearchUserResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by SearchUserResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type SearchUserResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserResponse_ItemMultiError) AllErrors() []error { return m }

// SearchUserResponse_ItemValidationError is the validation error returned by
// SearchUserResponse_Item.Validate if the designated constraints aren't met.
type SearchUserResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserResponse_ItemValidationError) ErrorName() string {
	return "SearchUserResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserResponse_ItemValidationError{}

// Validate checks the field values on SearchGroupChatsResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchGroupChatsResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchGroupChatsResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchGroupChatsResponse_ItemMultiError, or nil if none found.
func (m *SearchGroupChatsResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchGroupChatsResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Description

	// no validation rules for Count

	// no validation rules for MaxNum

	// no validation rules for IsMember

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return SearchGroupChatsResponse_ItemMultiError(errors)
	}

	return nil
}

// SearchGroupChatsResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by SearchGroupChatsResponse_Item.ValidateAll()
// if the designated constraints aren't met.
type SearchGroupChatsResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchGroupChatsResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchGroupChatsResponse_ItemMultiError) AllErrors() []error { return m }

// SearchGroupChatsResponse_ItemValidationError is the validation error
// returned by SearchGroupChatsResponse_Item.Validate if the designated
// constraints aren't met.
type SearchGroupChatsResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchGroupChatsResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchGroupChatsResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchGroupChatsResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchGroupChatsResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchGroupChatsResponse_ItemValidationError) ErrorName() string {
	return "SearchGroupChatsResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchGroupChatsResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchGroupChatsResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchGroupChatsResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchGroupChatsResponse_ItemValidationError{}
