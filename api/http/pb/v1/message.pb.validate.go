// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/message.proto

package v1_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MessageReceiver with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MessageReceiver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageReceiver with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageReceiverMultiError, or nil if none found.
func (m *MessageReceiver) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageReceiver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DialogType

	// no validation rules for ReceiverId

	if len(errors) > 0 {
		return MessageReceiverMultiError(errors)
	}

	return nil
}

// MessageReceiverMultiError is an error wrapping multiple validation errors
// returned by MessageReceiver.ValidateAll() if the designated constraints
// aren't met.
type MessageReceiverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageReceiverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageReceiverMultiError) AllErrors() []error { return m }

// MessageReceiverValidationError is the validation error returned by
// MessageReceiver.Validate if the designated constraints aren't met.
type MessageReceiverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageReceiverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageReceiverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageReceiverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageReceiverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageReceiverValidationError) ErrorName() string { return "MessageReceiverValidationError" }

// Error satisfies the builtin error interface
func (e MessageReceiverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageReceiver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageReceiverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageReceiverValidationError{}

// Validate checks the field values on TextMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TextMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TextMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TextMessageRequestMultiError, or nil if none found.
func (m *TextMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TextMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TextMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TextMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TextMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetMention()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TextMessageRequestValidationError{
					field:  "Mention",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TextMessageRequestValidationError{
					field:  "Mention",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMention()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TextMessageRequestValidationError{
				field:  "Mention",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for QuoteId

	if len(errors) > 0 {
		return TextMessageRequestMultiError(errors)
	}

	return nil
}

// TextMessageRequestMultiError is an error wrapping multiple validation errors
// returned by TextMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type TextMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextMessageRequestMultiError) AllErrors() []error { return m }

// TextMessageRequestValidationError is the validation error returned by
// TextMessageRequest.Validate if the designated constraints aren't met.
type TextMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextMessageRequestValidationError) ErrorName() string {
	return "TextMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TextMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextMessageRequestValidationError{}

// Validate checks the field values on ImageMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImageMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImageMessageRequestMultiError, or nil if none found.
func (m *ImageMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Url

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Size

	// no validation rules for QuoteId

	if len(errors) > 0 {
		return ImageMessageRequestMultiError(errors)
	}

	return nil
}

// ImageMessageRequestMultiError is an error wrapping multiple validation
// errors returned by ImageMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type ImageMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageMessageRequestMultiError) AllErrors() []error { return m }

// ImageMessageRequestValidationError is the validation error returned by
// ImageMessageRequest.Validate if the designated constraints aren't met.
type ImageMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageMessageRequestValidationError) ErrorName() string {
	return "ImageMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImageMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageMessageRequestValidationError{}

// Validate checks the field values on VideoMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoMessageRequestMultiError, or nil if none found.
func (m *VideoMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Url

	// no validation rules for Duration

	// no validation rules for Size

	// no validation rules for Cover

	if len(errors) > 0 {
		return VideoMessageRequestMultiError(errors)
	}

	return nil
}

// VideoMessageRequestMultiError is an error wrapping multiple validation
// errors returned by VideoMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type VideoMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMessageRequestMultiError) AllErrors() []error { return m }

// VideoMessageRequestValidationError is the validation error returned by
// VideoMessageRequest.Validate if the designated constraints aren't met.
type VideoMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMessageRequestValidationError) ErrorName() string {
	return "VideoMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VideoMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMessageRequestValidationError{}

// Validate checks the field values on FileMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileMessageRequestMultiError, or nil if none found.
func (m *FileMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for UploadId

	if len(errors) > 0 {
		return FileMessageRequestMultiError(errors)
	}

	return nil
}

// FileMessageRequestMultiError is an error wrapping multiple validation errors
// returned by FileMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type FileMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMessageRequestMultiError) AllErrors() []error { return m }

// FileMessageRequestValidationError is the validation error returned by
// FileMessageRequest.Validate if the designated constraints aren't met.
type FileMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileMessageRequestValidationError) ErrorName() string {
	return "FileMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileMessageRequestValidationError{}

// Validate checks the field values on VoteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VoteMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VoteMessageRequestMultiError, or nil if none found.
func (m *VoteMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VoteMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VoteMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VoteMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoteMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Mode

	// no validation rules for Anonymous

	if len(errors) > 0 {
		return VoteMessageRequestMultiError(errors)
	}

	return nil
}

// VoteMessageRequestMultiError is an error wrapping multiple validation errors
// returned by VoteMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type VoteMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoteMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoteMessageRequestMultiError) AllErrors() []error { return m }

// VoteMessageRequestValidationError is the validation error returned by
// VoteMessageRequest.Validate if the designated constraints aren't met.
type VoteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoteMessageRequestValidationError) ErrorName() string {
	return "VoteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VoteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoteMessageRequestValidationError{}

// Validate checks the field values on VoiceMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VoiceMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoiceMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VoiceMessageRequestMultiError, or nil if none found.
func (m *VoiceMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VoiceMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VoiceMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VoiceMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoiceMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Url

	// no validation rules for Duration

	// no validation rules for Size

	if len(errors) > 0 {
		return VoiceMessageRequestMultiError(errors)
	}

	return nil
}

// VoiceMessageRequestMultiError is an error wrapping multiple validation
// errors returned by VoiceMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type VoiceMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoiceMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoiceMessageRequestMultiError) AllErrors() []error { return m }

// VoiceMessageRequestValidationError is the validation error returned by
// VoiceMessageRequest.Validate if the designated constraints aren't met.
type VoiceMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceMessageRequestValidationError) ErrorName() string {
	return "VoiceMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VoiceMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceMessageRequestValidationError{}

// Validate checks the field values on StickerMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickerMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickerMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickerMessageRequestMultiError, or nil if none found.
func (m *StickerMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StickerMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for StickerId

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StickerMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StickerMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StickerMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StickerMessageRequestMultiError(errors)
	}

	return nil
}

// StickerMessageRequestMultiError is an error wrapping multiple validation
// errors returned by StickerMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type StickerMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickerMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickerMessageRequestMultiError) AllErrors() []error { return m }

// StickerMessageRequestValidationError is the validation error returned by
// StickerMessageRequest.Validate if the designated constraints aren't met.
type StickerMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerMessageRequestValidationError) ErrorName() string {
	return "StickerMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StickerMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerMessageRequestValidationError{}

// Validate checks the field values on ForwardMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardMessageRequestMultiError, or nil if none found.
func (m *ForwardMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Mode

	if len(errors) > 0 {
		return ForwardMessageRequestMultiError(errors)
	}

	return nil
}

// ForwardMessageRequestMultiError is an error wrapping multiple validation
// errors returned by ForwardMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type ForwardMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardMessageRequestMultiError) AllErrors() []error { return m }

// ForwardMessageRequestValidationError is the validation error returned by
// ForwardMessageRequest.Validate if the designated constraints aren't met.
type ForwardMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardMessageRequestValidationError) ErrorName() string {
	return "ForwardMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardMessageRequestValidationError{}

// Validate checks the field values on MixedMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MixedMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MixedMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MixedMessageRequestMultiError, or nil if none found.
func (m *MixedMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MixedMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MixedMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MixedMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MixedMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MixedMessageRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MixedMessageRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MixedMessageRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for QuoteId

	if len(errors) > 0 {
		return MixedMessageRequestMultiError(errors)
	}

	return nil
}

// MixedMessageRequestMultiError is an error wrapping multiple validation
// errors returned by MixedMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type MixedMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MixedMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MixedMessageRequestMultiError) AllErrors() []error { return m }

// MixedMessageRequestValidationError is the validation error returned by
// MixedMessageRequest.Validate if the designated constraints aren't met.
type MixedMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MixedMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MixedMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MixedMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MixedMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MixedMessageRequestValidationError) ErrorName() string {
	return "MixedMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MixedMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMixedMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MixedMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MixedMessageRequestValidationError{}

// Validate checks the field values on CodeMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CodeMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CodeMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CodeMessageRequestMultiError, or nil if none found.
func (m *CodeMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CodeMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CodeMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CodeMessageRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CodeMessageRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Lang

	// no validation rules for Code

	if len(errors) > 0 {
		return CodeMessageRequestMultiError(errors)
	}

	return nil
}

// CodeMessageRequestMultiError is an error wrapping multiple validation errors
// returned by CodeMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type CodeMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CodeMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CodeMessageRequestMultiError) AllErrors() []error { return m }

// CodeMessageRequestValidationError is the validation error returned by
// CodeMessageRequest.Validate if the designated constraints aren't met.
type CodeMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodeMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodeMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodeMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodeMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodeMessageRequestValidationError) ErrorName() string {
	return "CodeMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CodeMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodeMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodeMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodeMessageRequestValidationError{}

// Validate checks the field values on LoginMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginMessageRequestMultiError, or nil if none found.
func (m *LoginMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for Agent

	// no validation rules for Address

	if len(errors) > 0 {
		return LoginMessageRequestMultiError(errors)
	}

	return nil
}

// LoginMessageRequestMultiError is an error wrapping multiple validation
// errors returned by LoginMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginMessageRequestMultiError) AllErrors() []error { return m }

// LoginMessageRequestValidationError is the validation error returned by
// LoginMessageRequest.Validate if the designated constraints aren't met.
type LoginMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginMessageRequestValidationError) ErrorName() string {
	return "LoginMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginMessageRequestValidationError{}

// Validate checks the field values on KeyboardMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KeyboardMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyboardMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KeyboardMessageMultiError, or nil if none found.
func (m *KeyboardMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyboardMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Event

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KeyboardMessageValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KeyboardMessageValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KeyboardMessageValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KeyboardMessageMultiError(errors)
	}

	return nil
}

// KeyboardMessageMultiError is an error wrapping multiple validation errors
// returned by KeyboardMessage.ValidateAll() if the designated constraints
// aren't met.
type KeyboardMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyboardMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyboardMessageMultiError) AllErrors() []error { return m }

// KeyboardMessageValidationError is the validation error returned by
// KeyboardMessage.Validate if the designated constraints aren't met.
type KeyboardMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyboardMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyboardMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyboardMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyboardMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyboardMessageValidationError) ErrorName() string { return "KeyboardMessageValidationError" }

// Error satisfies the builtin error interface
func (e KeyboardMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyboardMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyboardMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyboardMessageValidationError{}

// Validate checks the field values on TextMessageRequest_Mention with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TextMessageRequest_Mention) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TextMessageRequest_Mention with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TextMessageRequest_MentionMultiError, or nil if none found.
func (m *TextMessageRequest_Mention) ValidateAll() error {
	return m.validate(true)
}

func (m *TextMessageRequest_Mention) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for All

	if len(errors) > 0 {
		return TextMessageRequest_MentionMultiError(errors)
	}

	return nil
}

// TextMessageRequest_MentionMultiError is an error wrapping multiple
// validation errors returned by TextMessageRequest_Mention.ValidateAll() if
// the designated constraints aren't met.
type TextMessageRequest_MentionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextMessageRequest_MentionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextMessageRequest_MentionMultiError) AllErrors() []error { return m }

// TextMessageRequest_MentionValidationError is the validation error returned
// by TextMessageRequest_Mention.Validate if the designated constraints aren't met.
type TextMessageRequest_MentionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextMessageRequest_MentionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextMessageRequest_MentionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextMessageRequest_MentionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextMessageRequest_MentionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextMessageRequest_MentionValidationError) ErrorName() string {
	return "TextMessageRequest_MentionValidationError"
}

// Error satisfies the builtin error interface
func (e TextMessageRequest_MentionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextMessageRequest_Mention.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextMessageRequest_MentionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextMessageRequest_MentionValidationError{}

// Validate checks the field values on MixedMessageRequest_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MixedMessageRequest_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MixedMessageRequest_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MixedMessageRequest_ItemMultiError, or nil if none found.
func (m *MixedMessageRequest_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *MixedMessageRequest_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Content

	if len(errors) > 0 {
		return MixedMessageRequest_ItemMultiError(errors)
	}

	return nil
}

// MixedMessageRequest_ItemMultiError is an error wrapping multiple validation
// errors returned by MixedMessageRequest_Item.ValidateAll() if the designated
// constraints aren't met.
type MixedMessageRequest_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MixedMessageRequest_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MixedMessageRequest_ItemMultiError) AllErrors() []error { return m }

// MixedMessageRequest_ItemValidationError is the validation error returned by
// MixedMessageRequest_Item.Validate if the designated constraints aren't met.
type MixedMessageRequest_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MixedMessageRequest_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MixedMessageRequest_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MixedMessageRequest_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MixedMessageRequest_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MixedMessageRequest_ItemValidationError) ErrorName() string {
	return "MixedMessageRequest_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e MixedMessageRequest_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMixedMessageRequest_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MixedMessageRequest_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MixedMessageRequest_ItemValidationError{}

// Validate checks the field values on KeyboardMessage_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KeyboardMessage_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyboardMessage_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KeyboardMessage_DataMultiError, or nil if none found.
func (m *KeyboardMessage_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyboardMessage_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SenderId

	// no validation rules for ReceiverId

	if len(errors) > 0 {
		return KeyboardMessage_DataMultiError(errors)
	}

	return nil
}

// KeyboardMessage_DataMultiError is an error wrapping multiple validation
// errors returned by KeyboardMessage_Data.ValidateAll() if the designated
// constraints aren't met.
type KeyboardMessage_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyboardMessage_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyboardMessage_DataMultiError) AllErrors() []error { return m }

// KeyboardMessage_DataValidationError is the validation error returned by
// KeyboardMessage_Data.Validate if the designated constraints aren't met.
type KeyboardMessage_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyboardMessage_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyboardMessage_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyboardMessage_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyboardMessage_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyboardMessage_DataValidationError) ErrorName() string {
	return "KeyboardMessage_DataValidationError"
}

// Error satisfies the builtin error interface
func (e KeyboardMessage_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyboardMessage_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyboardMessage_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyboardMessage_DataValidationError{}
