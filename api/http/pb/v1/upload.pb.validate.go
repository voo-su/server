// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/upload.proto

package v1_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UploadAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadAvatarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadAvatarResponseMultiError, or nil if none found.
func (m *UploadAvatarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadAvatarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Avatar

	if len(errors) > 0 {
		return UploadAvatarResponseMultiError(errors)
	}

	return nil
}

// UploadAvatarResponseMultiError is an error wrapping multiple validation
// errors returned by UploadAvatarResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadAvatarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadAvatarResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadAvatarResponseMultiError) AllErrors() []error { return m }

// UploadAvatarResponseValidationError is the validation error returned by
// UploadAvatarResponse.Validate if the designated constraints aren't met.
type UploadAvatarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadAvatarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadAvatarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadAvatarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadAvatarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadAvatarResponseValidationError) ErrorName() string {
	return "UploadAvatarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadAvatarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadAvatarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadAvatarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadAvatarResponseValidationError{}

// Validate checks the field values on UploadImagerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadImagerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImagerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadImagerRequestMultiError, or nil if none found.
func (m *UploadImagerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImagerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UploadImagerRequestMultiError(errors)
	}

	return nil
}

// UploadImagerRequestMultiError is an error wrapping multiple validation
// errors returned by UploadImagerRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadImagerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImagerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImagerRequestMultiError) AllErrors() []error { return m }

// UploadImagerRequestValidationError is the validation error returned by
// UploadImagerRequest.Validate if the designated constraints aren't met.
type UploadImagerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImagerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImagerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImagerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImagerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImagerRequestValidationError) ErrorName() string {
	return "UploadImagerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadImagerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImagerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImagerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImagerRequestValidationError{}

// Validate checks the field values on UploadImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadImageResponseMultiError, or nil if none found.
func (m *UploadImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Src

	if len(errors) > 0 {
		return UploadImageResponseMultiError(errors)
	}

	return nil
}

// UploadImageResponseMultiError is an error wrapping multiple validation
// errors returned by UploadImageResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImageResponseMultiError) AllErrors() []error { return m }

// UploadImageResponseValidationError is the validation error returned by
// UploadImageResponse.Validate if the designated constraints aren't met.
type UploadImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImageResponseValidationError) ErrorName() string {
	return "UploadImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImageResponseValidationError{}

// Validate checks the field values on UploadInitiateMultipartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadInitiateMultipartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadInitiateMultipartRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UploadInitiateMultipartRequestMultiError, or nil if none found.
func (m *UploadInitiateMultipartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadInitiateMultipartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	// no validation rules for FileSize

	if len(errors) > 0 {
		return UploadInitiateMultipartRequestMultiError(errors)
	}

	return nil
}

// UploadInitiateMultipartRequestMultiError is an error wrapping multiple
// validation errors returned by UploadInitiateMultipartRequest.ValidateAll()
// if the designated constraints aren't met.
type UploadInitiateMultipartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadInitiateMultipartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadInitiateMultipartRequestMultiError) AllErrors() []error { return m }

// UploadInitiateMultipartRequestValidationError is the validation error
// returned by UploadInitiateMultipartRequest.Validate if the designated
// constraints aren't met.
type UploadInitiateMultipartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadInitiateMultipartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadInitiateMultipartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadInitiateMultipartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadInitiateMultipartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadInitiateMultipartRequestValidationError) ErrorName() string {
	return "UploadInitiateMultipartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadInitiateMultipartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadInitiateMultipartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadInitiateMultipartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadInitiateMultipartRequestValidationError{}

// Validate checks the field values on UploadInitiateMultipartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadInitiateMultipartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadInitiateMultipartResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UploadInitiateMultipartResponseMultiError, or nil if none found.
func (m *UploadInitiateMultipartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadInitiateMultipartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadId

	// no validation rules for ShardSize

	// no validation rules for ShardNum

	if len(errors) > 0 {
		return UploadInitiateMultipartResponseMultiError(errors)
	}

	return nil
}

// UploadInitiateMultipartResponseMultiError is an error wrapping multiple
// validation errors returned by UploadInitiateMultipartResponse.ValidateAll()
// if the designated constraints aren't met.
type UploadInitiateMultipartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadInitiateMultipartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadInitiateMultipartResponseMultiError) AllErrors() []error { return m }

// UploadInitiateMultipartResponseValidationError is the validation error
// returned by UploadInitiateMultipartResponse.Validate if the designated
// constraints aren't met.
type UploadInitiateMultipartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadInitiateMultipartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadInitiateMultipartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadInitiateMultipartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadInitiateMultipartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadInitiateMultipartResponseValidationError) ErrorName() string {
	return "UploadInitiateMultipartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadInitiateMultipartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadInitiateMultipartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadInitiateMultipartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadInitiateMultipartResponseValidationError{}

// Validate checks the field values on UploadMultipartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadMultipartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadMultipartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadMultipartRequestMultiError, or nil if none found.
func (m *UploadMultipartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadMultipartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadId

	// no validation rules for SplitIndex

	// no validation rules for SplitNum

	if len(errors) > 0 {
		return UploadMultipartRequestMultiError(errors)
	}

	return nil
}

// UploadMultipartRequestMultiError is an error wrapping multiple validation
// errors returned by UploadMultipartRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadMultipartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadMultipartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadMultipartRequestMultiError) AllErrors() []error { return m }

// UploadMultipartRequestValidationError is the validation error returned by
// UploadMultipartRequest.Validate if the designated constraints aren't met.
type UploadMultipartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadMultipartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadMultipartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadMultipartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadMultipartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadMultipartRequestValidationError) ErrorName() string {
	return "UploadMultipartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadMultipartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadMultipartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadMultipartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadMultipartRequestValidationError{}

// Validate checks the field values on UploadMultipartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadMultipartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadMultipartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadMultipartResponseMultiError, or nil if none found.
func (m *UploadMultipartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadMultipartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadId

	// no validation rules for IsMerge

	if len(errors) > 0 {
		return UploadMultipartResponseMultiError(errors)
	}

	return nil
}

// UploadMultipartResponseMultiError is an error wrapping multiple validation
// errors returned by UploadMultipartResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadMultipartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadMultipartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadMultipartResponseMultiError) AllErrors() []error { return m }

// UploadMultipartResponseValidationError is the validation error returned by
// UploadMultipartResponse.Validate if the designated constraints aren't met.
type UploadMultipartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadMultipartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadMultipartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadMultipartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadMultipartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadMultipartResponseValidationError) ErrorName() string {
	return "UploadMultipartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadMultipartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadMultipartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadMultipartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadMultipartResponseValidationError{}
