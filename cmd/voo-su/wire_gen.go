// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"voo.su/internal/cli"
	"voo.su/internal/cli/handler/cron"
	"voo.su/internal/cli/handler/queue"
	"voo.su/internal/config"
	"voo.su/internal/domain/logic"
	"voo.su/internal/provider"
	"voo.su/internal/repository"
	"voo.su/internal/repository/cache"
	"voo.su/internal/repository/repo"
	"voo.su/internal/transport/grpc"
	handler3 "voo.su/internal/transport/grpc/handler"
	"voo.su/internal/transport/grpc/middleware"
	"voo.su/internal/transport/http"
	"voo.su/internal/transport/http/handler"
	"voo.su/internal/transport/http/handler/bot"
	"voo.su/internal/transport/http/handler/v1"
	"voo.su/internal/transport/http/router"
	"voo.su/internal/transport/ws"
	"voo.su/internal/transport/ws/consume"
	chat2 "voo.su/internal/transport/ws/consume/chat"
	"voo.su/internal/transport/ws/event"
	"voo.su/internal/transport/ws/event/chat"
	handler2 "voo.su/internal/transport/ws/handler"
	"voo.su/internal/transport/ws/process"
	router2 "voo.su/internal/transport/ws/router"
	"voo.su/internal/usecase"
)

// Injectors from wire.go:

func NewHttpInjector(conf *config.Config) *http.AppProvider {
	client := provider.NewRedisClient(conf)
	smsCache := cache.NewSmsCache(client)
	db := provider.NewPostgresqlClient(conf)
	contactRemarkCache := cache.NewContactRemarkCache(client)
	relationCache := cache.NewRelationCache(client)
	contact := repo.NewContact(db, contactRemarkCache, relationCache)
	groupChatMember := repo.NewGroupMember(db, relationCache)
	groupChat := repo.NewGroupChat(db)
	email := provider.NewEmailClient(conf)
	user := repo.NewUser(db)
	authUseCase := usecase.NewAuthUseCase(smsCache, contact, groupChatMember, groupChat, conf, email, user)
	jwtTokenCache := cache.NewJwtTokenCache(client)
	redisLockCache := cache.NewRedisLockCache(client)
	source := repository.NewSource(db, client)
	httpClient := provider.NewHttpClient()
	requestClient := provider.NewRequestClient(httpClient)
	ipAddressUseCase := usecase.NewIpAddressUseCase(source, conf, requestClient)
	chat := repo.NewChat(db)
	chatUseCase := usecase.NewChatUseCase(source, chat, groupChatMember)
	repoBot := repo.NewBot(db)
	iMinio := provider.NewMinioClient(conf)
	botUseCase := usecase.NewBotUseCase(source, conf, repoBot, user, iMinio)
	userSession := repo.NewUserSession(db)
	pushToken := repo.NewPushToken(db)
	userUseCase := usecase.NewUserUseCase(source, user, userSession, pushToken)
	sequenceCache := cache.NewSequenceCache(client)
	sequence := repo.NewSequence(db, sequenceCache)
	messageForwardLogic := logic.NewMessageForwardLogic(db, sequence)
	fileSplit := repo.NewFileSplit(db)
	voteCache := cache.NewVoteCache(client)
	messageVote := repo.NewMessageVote(db, voteCache)
	message := repo.NewMessage(db)
	unreadCache := cache.NewUnreadCache(client)
	messageCache := cache.NewMessageCache(client)
	serverCache := cache.NewServerCache(client)
	clientCache := cache.NewClientCache(conf, client, serverCache)
	iNatsClient := provider.NewNatsClient(conf)
	messageUseCase := &usecase.MessageUseCase{
		Source:              source,
		Conf:                conf,
		MessageForwardLogic: messageForwardLogic,
		Minio:               iMinio,
		GroupChatMemberRepo: groupChatMember,
		FileSplitRepo:       fileSplit,
		MessageVoteRepo:     messageVote,
		Sequence:            sequence,
		MessageRepo:         message,
		BotRepo:             repoBot,
		UnreadCache:         unreadCache,
		MessageCache:        messageCache,
		ServerCache:         serverCache,
		ClientCache:         clientCache,
		DialogVoteCache:     voteCache,
		Nats:                iNatsClient,
	}
	auth := &v1.Auth{
		Conf:             conf,
		AuthUseCase:      authUseCase,
		JwtTokenCache:    jwtTokenCache,
		RedisLockCache:   redisLockCache,
		IpAddressUseCase: ipAddressUseCase,
		ChatUseCase:      chatUseCase,
		BotUseCase:       botUseCase,
		UserUseCase:      userUseCase,
		MessageUseCase:   messageUseCase,
	}
	account := &v1.Account{
		UserUseCase: userUseCase,
	}
	contactUseCase := usecase.NewContactUseCase(source, contact)
	v1Contact := &v1.Contact{
		ContactUseCase: contactUseCase,
		ClientCache:    clientCache,
		ChatUseCase:    chatUseCase,
		UserUseCase:    userUseCase,
		MessageUseCase: messageUseCase,
	}
	contactRequestUseCase := usecase.NewContactRequestUseCase(source)
	contactRequest := &v1.ContactRequest{
		ContactRequestUseCase: contactRequestUseCase,
		ContactUseCase:        contactUseCase,
		MessageUseCase:        messageUseCase,
	}
	groupChatUseCase := usecase.NewGroupChatUseCase(source, groupChat, groupChatMember, sequence, relationCache)
	v1Chat := &v1.Chat{
		ChatUseCase:        chatUseCase,
		RedisLock:          redisLockCache,
		ClientCache:        clientCache,
		MessageCache:       messageCache,
		ContactUseCase:     contactUseCase,
		UnreadCache:        unreadCache,
		ContactRemarkCache: contactRemarkCache,
		GroupChatUseCase:   groupChatUseCase,
		AuthUseCase:        authUseCase,
		UserUseCase:        userUseCase,
	}
	groupChatMemberUseCase := usecase.NewGroupMemberUseCase(source, groupChatMember)
	v1Message := &v1.Message{
		Conf:                   conf,
		ChatUseCase:            chatUseCase,
		AuthUseCase:            authUseCase,
		MessageUseCase:         messageUseCase,
		Minio:                  iMinio,
		GroupChatMemberUseCase: groupChatMemberUseCase,
	}
	publish := &v1.Publish{
		AuthUseCase:    authUseCase,
		MessageUseCase: messageUseCase,
	}
	fileSplitUseCase := usecase.NewFileSplitUseCase(source, conf, fileSplit, iMinio)
	upload := &v1.Upload{
		Conf:             conf,
		Minio:            iMinio,
		FileSplitUseCase: fileSplitUseCase,
	}
	v1GroupChat := &v1.GroupChat{
		GroupChatUseCase:       groupChatUseCase,
		GroupChatMemberUseCase: groupChatMemberUseCase,
		ChatUseCase:            chatUseCase,
		ContactUseCase:         contactUseCase,
		MessageUseCase:         messageUseCase,
		UserUseCase:            userUseCase,
		RedisLockCache:         redisLockCache,
	}
	groupChatRequestCache := cache.NewGroupChatRequestCache(client)
	groupChatRequest := repo.NewGroupChatApply(db)
	groupChatRequestUseCase := usecase.NewGroupRequestUseCase(source, groupChatRequest)
	v1GroupChatRequest := &v1.GroupChatRequest{
		GroupRequestCache:       groupChatRequestCache,
		GroupChatRequestUseCase: groupChatRequestUseCase,
		GroupChatMemberUseCase:  groupChatMemberUseCase,
		GroupChatUseCase:        groupChatUseCase,
		Redis:                   client,
	}
	sticker := repo.NewSticker(db)
	stickerUseCase := usecase.NewStickerUseCase(source, sticker, iMinio)
	v1Sticker := &v1.Sticker{
		Conf:           conf,
		StickerUseCase: stickerUseCase,
		Minio:          iMinio,
		RedisLockCache: redisLockCache,
	}
	contactFolder := repo.NewContactFolder(db)
	contactFolderUseCase := usecase.NewContactFolderUseCase(source, contact, contactFolder)
	v1ContactFolder := &v1.ContactFolder{
		ContactFolderUseCase: contactFolderUseCase,
	}
	groupChatAds := repo.NewGroupChatAds(db)
	groupChatAdsUseCase := usecase.NewGroupChatAdsUseCase(source, groupChatAds)
	v1GroupChatAds := &v1.GroupChatAds{
		GroupMemberUseCase:  groupChatMemberUseCase,
		GroupChatAdsUseCase: groupChatAdsUseCase,
		MessageUseCase:      messageUseCase,
	}
	search := &v1.Search{
		UserUseCase:      userUseCase,
		GroupChatUseCase: groupChatUseCase,
	}
	v1Bot := &v1.Bot{
		BotUseCase:     botUseCase,
		MessageUseCase: messageUseCase,
	}
	project := repo.NewProject(db)
	projectMember := repo.NewProjectMember(db)
	projectTaskType := repo.NewProjectTaskType(db)
	projectTask := repo.NewProjectTask(db)
	projectTaskComment := repo.NewProjectTaskComment(db)
	projectTaskCoexecutor := repo.NewProjectTaskCoexecutor(db)
	projectTaskWatcher := repo.NewProjectTaskWatcher(db)
	projectUseCase := usecase.NewProjectUseCase(source, project, projectMember, projectTaskType, projectTask, projectTaskComment, user, relationCache, projectTaskCoexecutor, projectTaskWatcher)
	v1Project := &v1.Project{
		ProjectUseCase: projectUseCase,
		RedisLockCache: redisLockCache,
	}
	v1ProjectTask := &v1.ProjectTask{
		ProjectUseCase: projectUseCase,
	}
	v1ProjectTaskComment := &v1.ProjectTaskComment{
		ProjectUseCase: projectUseCase,
	}
	v1Handler := &v1.Handler{
		Auth:               auth,
		Account:            account,
		Contact:            v1Contact,
		ContactRequest:     contactRequest,
		Chat:               v1Chat,
		Message:            v1Message,
		MessagePublish:     publish,
		Upload:             upload,
		GroupChat:          v1GroupChat,
		GroupChatRequest:   v1GroupChatRequest,
		Sticker:            v1Sticker,
		ContactFolder:      v1ContactFolder,
		GroupChatAds:       v1GroupChatAds,
		Search:             search,
		Bot:                v1Bot,
		Project:            v1Project,
		ProjectTask:        v1ProjectTask,
		ProjectTaskComment: v1ProjectTaskComment,
	}
	botMessage := &bot.Message{
		MessageUseCase: messageUseCase,
		BotUseCase:     botUseCase,
	}
	botHandler := &bot.Handler{
		Message: botMessage,
	}
	handlerHandler := &handler.Handler{
		V1:  v1Handler,
		Bot: botHandler,
	}
	engine := router.NewRouter(conf, handlerHandler, jwtTokenCache)
	appProvider := &http.AppProvider{
		Conf:   conf,
		Engine: engine,
	}
	return appProvider
}

func NewWsInjector(conf *config.Config) *ws.AppProvider {
	client := provider.NewRedisClient(conf)
	serverCache := cache.NewServerCache(client)
	clientCache := cache.NewClientCache(conf, client, serverCache)
	roomCache := cache.NewRoomCache(client)
	db := provider.NewPostgresqlClient(conf)
	relationCache := cache.NewRelationCache(client)
	groupChatMember := repo.NewGroupMember(db, relationCache)
	source := repository.NewSource(db, client)
	groupChatMemberUseCase := usecase.NewGroupMemberUseCase(source, groupChatMember)
	chatHandler := chat.NewHandler(client, groupChatMemberUseCase)
	chatEvent := &event.ChatEvent{
		Redis:                  client,
		Conf:                   conf,
		RoomCache:              roomCache,
		GroupChatMemberRepo:    groupChatMember,
		GroupChatMemberUseCase: groupChatMemberUseCase,
		Handler:                chatHandler,
	}
	chatChannel := &handler2.ChatChannel{
		ClientCache: clientCache,
		Event:       chatEvent,
	}
	handlerHandler := &handler2.Handler{
		Chat: chatChannel,
		Conf: conf,
	}
	jwtTokenCache := cache.NewJwtTokenCache(client)
	engine := router2.NewRouter(conf, handlerHandler, jwtTokenCache)
	healthSubscribe := process.NewHealthSubscribe(conf, serverCache)
	repoChat := repo.NewChat(db)
	chatUseCase := usecase.NewChatUseCase(source, repoChat, groupChatMember)
	sequenceCache := cache.NewSequenceCache(client)
	sequence := repo.NewSequence(db, sequenceCache)
	messageForwardLogic := logic.NewMessageForwardLogic(db, sequence)
	iMinio := provider.NewMinioClient(conf)
	fileSplit := repo.NewFileSplit(db)
	voteCache := cache.NewVoteCache(client)
	messageVote := repo.NewMessageVote(db, voteCache)
	message := repo.NewMessage(db)
	repoBot := repo.NewBot(db)
	unreadCache := cache.NewUnreadCache(client)
	messageCache := cache.NewMessageCache(client)
	iNatsClient := provider.NewNatsClient(conf)
	messageUseCase := &usecase.MessageUseCase{
		Source:              source,
		Conf:                conf,
		MessageForwardLogic: messageForwardLogic,
		Minio:               iMinio,
		GroupChatMemberRepo: groupChatMember,
		FileSplitRepo:       fileSplit,
		MessageVoteRepo:     messageVote,
		Sequence:            sequence,
		MessageRepo:         message,
		BotRepo:             repoBot,
		UnreadCache:         unreadCache,
		MessageCache:        messageCache,
		ServerCache:         serverCache,
		ClientCache:         clientCache,
		DialogVoteCache:     voteCache,
		Nats:                iNatsClient,
	}
	contactRemarkCache := cache.NewContactRemarkCache(client)
	contact := repo.NewContact(db, contactRemarkCache, relationCache)
	contactUseCase := usecase.NewContactUseCase(source, contact)
	handler3 := &chat2.Handler{
		Conf:           conf,
		ClientCache:    clientCache,
		RoomCache:      roomCache,
		ChatUseCase:    chatUseCase,
		MessageUseCase: messageUseCase,
		ContactUseCase: contactUseCase,
		Source:         source,
	}
	chatSubscribe := consume.NewChatSubscribe(handler3)
	messageSubscribe := process.NewMessageSubscribe(conf, client, chatSubscribe)
	subServers := &process.SubServers{
		HealthSubscribe:  healthSubscribe,
		MessageSubscribe: messageSubscribe,
	}
	server := process.NewServer(subServers)
	email := provider.NewEmailClient(conf)
	providers := &provider.Providers{
		EmailClient: email,
	}
	appProvider := &ws.AppProvider{
		Conf:      conf,
		Engine:    engine,
		Coroutine: server,
		Handler:   handlerHandler,
		Providers: providers,
	}
	return appProvider
}

func NewGrpcInjector(conf *config.Config) *grpc.AppProvider {
	tokenMiddleware := middleware.NewTokenMiddleware(conf)
	grpcMethodService := middleware.NewGrpMethodsService()
	client := provider.NewRedisClient(conf)
	smsCache := cache.NewSmsCache(client)
	db := provider.NewPostgresqlClient(conf)
	contactRemarkCache := cache.NewContactRemarkCache(client)
	relationCache := cache.NewRelationCache(client)
	contact := repo.NewContact(db, contactRemarkCache, relationCache)
	groupChatMember := repo.NewGroupMember(db, relationCache)
	groupChat := repo.NewGroupChat(db)
	email := provider.NewEmailClient(conf)
	user := repo.NewUser(db)
	authUseCase := usecase.NewAuthUseCase(smsCache, contact, groupChatMember, groupChat, conf, email, user)
	jwtTokenCache := cache.NewJwtTokenCache(client)
	source := repository.NewSource(db, client)
	httpClient := provider.NewHttpClient()
	requestClient := provider.NewRequestClient(httpClient)
	ipAddressUseCase := usecase.NewIpAddressUseCase(source, conf, requestClient)
	repoChat := repo.NewChat(db)
	chatUseCase := usecase.NewChatUseCase(source, repoChat, groupChatMember)
	repoBot := repo.NewBot(db)
	userSession := repo.NewUserSession(db)
	authHandler := handler3.NewAuthHandler(conf, tokenMiddleware, authUseCase, jwtTokenCache, ipAddressUseCase, chatUseCase, repoBot, userSession)
	contactUseCase := usecase.NewContactUseCase(source, contact)
	messageCache := cache.NewMessageCache(client)
	unreadCache := cache.NewUnreadCache(client)
	chatHandler := handler3.NewChatHandler(conf, contactUseCase, chatUseCase, messageCache, unreadCache)
	contactHandler := handler3.NewContactHandler(conf, tokenMiddleware, contactUseCase)
	appProvider := &grpc.AppProvider{
		Conf:            conf,
		TokenMiddleware: tokenMiddleware,
		RoutesServices:  grpcMethodService,
		AuthHandler:     authHandler,
		ChatHandler:     chatHandler,
		ContactHandler:  contactHandler,
	}
	return appProvider
}

func NewCronInjector(conf *config.Config) *cli.CronProvider {
	client := provider.NewRedisClient(conf)
	serverCache := cache.NewServerCache(client)
	clearWsCache := cron.NewClearWsCache(serverCache)
	db := provider.NewPostgresqlClient(conf)
	iMinio := provider.NewMinioClient(conf)
	clearTmpFile := cron.NewClearTmpFile(conf, db, iMinio)
	clearExpireServer := cron.NewClearExpireServer(serverCache)
	crontab := &cli.Crontab{
		ClearWsCache:      clearWsCache,
		ClearTmpFile:      clearTmpFile,
		ClearExpireServer: clearExpireServer,
	}
	cronProvider := &cli.CronProvider{
		Conf:    conf,
		Crontab: crontab,
	}
	return cronProvider
}

func NewQueueInjector(conf *config.Config) *cli.QueueProvider {
	db := provider.NewPostgresqlClient(conf)
	client := provider.NewRedisClient(conf)
	emailHandle := queue.EmailHandle{
		Redis: client,
	}
	iNatsClient := provider.NewNatsClient(conf)
	pushHandle := queue.PushHandle{
		Conf: conf,
		Nats: iNatsClient,
	}
	queueJobs := &cli.QueueJobs{
		EmailHandle: emailHandle,
		PushHandle:  pushHandle,
	}
	queueProvider := &cli.QueueProvider{
		Conf: conf,
		DB:   db,
		Jobs: queueJobs,
	}
	return queueProvider
}

func NewMigrateInjector(conf *config.Config) *cli.MigrateProvider {
	db := provider.NewPostgresqlClient(conf)
	migrateProvider := &cli.MigrateProvider{
		Conf: conf,
		DB:   db,
	}
	return migrateProvider
}

func NewGenerateInjector(conf *config.Config) *cli.GenerateProvider {
	generateProvider := &cli.GenerateProvider{}
	return generateProvider
}

// wire.go:

var providerSet = wire.NewSet(provider.NewPostgresqlClient, provider.NewClickHouseClient, provider.NewRedisClient, provider.NewHttpClient, provider.NewEmailClient, provider.NewMinioClient, provider.NewRequestClient, provider.NewNatsClient, wire.Struct(new(provider.Providers), "*"), cache.ProviderSet, logic.ProviderSet, usecase.ProviderSet, repository.ProviderSet)
